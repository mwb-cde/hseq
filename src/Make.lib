###
# Makefile for building the HSeq library from object files
#
# Should only be called from the main Makefile.
###

##
# Calculate the file list
#
# Input: 
#   LIBDIR: The library directory 
#
#   OBJDIRS: The list of directories (in order) from which to take the 
#	object files
# Output:
#   FILELIST: The list of filenames with which to build the library
#
# Clobbered variables:
#   FILES
##

SUBDATA = Makefile.def

#
# Read the list of files from each sub-directory into FILELIST.
# 

FILELIST :=
define FILELIST_template
       FILES :=
       include $(1)/$$(SUBDATA)
       $(info "subdir = $(1)")
       FILELIST += $$(FILES)  
endef
$(foreach subdir, $(OBJDIRS),$(eval $(call FILELIST_template,$(subdir))))

###
# Standard build settings.
###

# SRCDIR: The source directory
SRCDIR ?= .

# BUILDDIR: The top of the build directory (relative to a sub-directory).
BUILDDIR ?= $(SRCDIR)/..

# CONFIGFILE: Configuration data file 
#CONFIGFILE = $(CONFIGDIR)/data.make

# Read from $(CONFIGFILE)
ifdef CONFIGFILE
include $(CONFIGFILE)
endif

$(warning "CONFIGFILE = $(CONFIGFILE)")
$(warning "FAST = $(FAST)")
$(warning "NATIVE = $(NATIVE)")

# FAST: whether to use the fast compilers
ifndef FAST
export FAST := $(FastCompilers)
endif

# NATIVE: Whether to build the native code library
ifndef NATIVE
export NATIVE := $(NativeCompilers)
endif

# STDDEFS_FILE: Common definitions
STDDEFS_FILE ?= config/Makefile.std

# Read from $(STDDEFS_FILE)
include $(STDDEFS_FILE)

##
# Targets
##

# lib: Build the library
.PHONY: lib
# obj: Build the object file
.PHONY: obj

# all: Build the library
.PHONY: all

# clean: Remove the library and any generated files
.PHONY: clean
# reallyclean: Remove the library and any generated files
.PHONY: reallyclean

# install: Install the library
.PHONY: install

## build targets

.PHONY: build-headers 
.PHONY: build-code build-bytecode build-natcode
.PHONY: build-module build-bytemodule build-natmodule
.PHONY: build-bytelib build-natlib build-lib

.PHONY: install-headers 
.PHONY: install-code install-bytecode install-natcode
.PHONY: install-bytelib install-natlib install-lib
.PHONY: install-other

##
# Output 
#  LIBFILE: The name of the library (no suffix)
#  INSTALLDIR: The directory to install to
##

MODULE_NAME ?= HSeq

LIBFILE ?= hseq

INSTALLDIR = lib

###
# Header, byte code and native code files
###

# HEADERS: the list of header (.cmi) files 
HEADERS = $(call interface,$(FILELIST))

# MLHEADERS: the list of ML header (.mli) files 
MLHEADERS = $(call header,$(FILELIST))

# CODE: the list of code (.cmo) files 
BYTECODE = $(call bytecode,$(FILELIST))

# NATCODE: the list of native code (.cmx) files 
NATCODE = $(call natcode,$(FILELIST))

# OBJCODE: the list of object code (.o) files 
OBJCODE = $(call objcode,$(FILELIST))

# LIBHEADER: The generated header
LIBHEADER = $(call interface, $(MODULE_NAME))

# BYTEFILE: The name of the byte-code (.cmo) object file built
BYTEFILE = $(call bytecode,$(MODULE_NAME))

# BYTELIB: The full name of the byte-code library (.cma) file built
BYTELIB = $(call bytelib,$(LIBFILE))

# NATFILE: The name of the native-code files built
NATFILE = $(call natcode,$(MODULE_NAME))

# NATFILE: The name of the object-code files built
OBJFILE = $(call objcode,$(MODULE_NAME))

# NATLIB: The name of the native-code libraries (.cmxa) file built
NATLIB = $(call natlib,$(LIBFILE))

# OBJLIB: The name of the object-code libraries (.a) file built
OBJLIB = $(call objlib,$(LIBFILE))


##
# Calculate which targets to build
##

# BUILD_TARGETS: The targets to build
BUILD_TARGETS:= build-bytelib

ifeq '$(NATIVE)' 'true'
BUILD_TARGETS := $(BUILD_TARGETS) build-natlib
endif

##
# Build targets
##

$(warning "LIBFILE = $(LIBFILE)")

$(LIBDIR)/$(BYTEFILE):
	($(CD) $(LIBDIR); \
	$(OCAMLC) $(INCLUDE) -pack -o $(BYTEFILE) $(BYTECODE))

$(LIBDIR)/$(BYTELIB): $(LIBDIR)/$(BYTEFILE)
	($(CD) $(LIBDIR); \
	$(OCAMLlink) -o $(BYTELIB) $(BYTEFILE))

$(LIBDIR)/$(NATFILE):
	($(CD) $(LIBDIR); \
	$(OCAMLOPT) $(INCLUDE) -pack -o $(NATFILE) $(NATCODE))

$(LIBDIR)/$(NATLIB): $(LIBDIR)/$(NATFILE)
	($(CD) $(LIBDIR); \
	$(OCAMLOPTlink) -o $(NATLIB) $(NATFILE))

build-bytemodule: $(LIBDIR)/$(BYTEFILE)

build-bytelib: $(LIBDIR)/$(BYTELIB)

build-natmodule: $(LIBDIR)/$(NATFILE)

build-natlib: $(LIBDIR)/$(NATLIB)

build: $(BUILD_TARGETS)

install: build

###
# Clean up
###

.PHONY: clean
#clean: 
#	$(RM) $(BYTEFILE) $(NATFILE)

.PHONY: libclean
#libclean: clean
#	$(RM) $(HEADERS)
#	$(RM) $(BYTELIB)
#	$(RM) $(NATLIB)

