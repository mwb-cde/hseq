(*-----
 Name: hseqc.mlp
 Author: M Wahab <mwahab@users.sourceforge.net>
 Copyright M Wahab 2005
----*)

INCLUDE "../../config/configure.data"

(** [bindir]: The hseq binary directory *)
let bindir = BinDir

(** [includedir]: location of the hseq libraries *)
let includedir = LibDir

(** Start of script *)

(** Default values *)

(** [hseq_include]: The location of the hseq libs *)
let hseq_include = [includedir]

(** [hsq_libs]: The hseq libraries *)
let hseq_libs = ["hseq"]

(** [hseq_quoter]: The hseq quotation expander *)
let hseq_quoter = "-I "^includedir^" tpquote.cma"

(** [hseq_pp]: The hseq preprocessor *)
let hseq_pp = 
  String.concat " "
  ["camlp4o q_MLast.cmo"; hseq_quoter; "pa_extend.cmo"]
  
(** [ocamlc_include]: include directories for the ocamlc compiler (in order)*)
let ocamlc_include = ["+camlp4"]

(** [ocamlc_libs]: standard librariess for the ocamlc compiler (in order)*)
let ocamlc_libs = ["nums"; "unix"]

(** Functions *)

(** [error s]: exit print error message [s] *)
let error s = 
  Format.printf "@[hseqc: %s@]@." s;
  exit (-1)

(** 
  [program n]: Make the program name [n]. 
  On Win32, this adds .exe to [n].
  On other systems this is just [n].
*)
let program name =
  let suffix = 
    if (Sys.os_type = "Win32")
    then ".exe"
    else ""
  in 
    name^suffix

(** [bytelib n]: Make the name of byte-code library [n] *)
let bytelib n = 
  n^".cma"

(** [natlib n]: Make the name of native-code library [n] *)
let natlib n = 
  n^".cmxa"

(** [has_program name]: Test whether program [name] is available *)
let has_program s = 
  Sys.command s = 0

let ocamlc = "ocamlc"
let ocamlcopt = "ocamlc.opt"
let ocamlopt = "ocamlopt"
let ocamloptopt = "ocamlopt.opt"

(** [has_ocamlc]: Test for [ocamlc]*)
let has_ocamlc = has_program ocamlc

(** [has_ocamlcopt]: Test for [ocamlc.opt]*)
let has_ocamlcopt = has_program ocamlcopt

(** [has_ocamlopt]: Test for [ocamlopt]*)
let has_ocamlopt = has_program ocamlopt

(** [has_ocamloptopt]: Test for [ocamlopt.opt]*)
let has_ocamloptopt = has_program ocamloptopt

(** [byte_compiler]: The byte-code compiler *)
let byte_compiler = 
  if has_ocamlcopt 
  then program ocamlcopt
  else program ocamlc

(** [nat_compiler]: The native-code compiler *)
let nat_compiler = 
  if has_ocamloptopt
  then program ocamloptopt
  else program ocamlopt


(** Argument processing *)

type options =
    {
      mutable info: bool;
      mutable native: bool;
      mutable verbose: bool;
    }

(** Initial option values *)
let options = 
  { 
    info = false;
    native = false;
    verbose = false;
  }

let set_info option v () =
   option.info <- v

let set_native option v () =
   option.native <- v

let set_verbose option v () =
   option.verbose <- v

(** The command arguments *)

let other_args = ref []
let add_other arg = 
  other_args := arg::(!other_args)

let cli_args = 
  [
    ("--info", Arg.Unit (set_info options true),
     "print library information");
    ("--native", Arg.Unit (set_native options true),
     "native-code compilation");
    ("--verbose", Arg.Unit (set_verbose options true),
     "print the executed command");
    ("--", Arg.Rest (add_other),
     "pass remaining arguments to the compiler");
  ]

let usage_msg = 
  "hseqc: Support for compiling with HSeq"


let anon_fun = add_other 
(*
let anon_fun _= raise (Arg.Bad "unknown option")
*)

let parse_args () = Arg.parse cli_args anon_fun usage_msg

(** Main *)

let add x y = x^y

let make_byte_info () =
  let pp = 
    "-pp \""^hseq_pp^"\""
  in 
  let headers = 
    String.concat " "
      (List.map (add "-I ") ocamlc_include)
  in
  let hseq_headers = 
    String.concat " "
      (List.map (add "-I ") hseq_include)
  in 
  let libs = 
    String.concat " "
      (List.map bytelib ocamlc_libs)
  in 
  let hseqlib = 
    String.concat " "
      (List.map bytelib hseq_libs)
  in 
    String.concat " "
      [pp; headers; hseq_headers; libs; hseqlib ]

let make_nat_info () =
  let pp = 
    "-pp \""^hseq_pp^"\""
  in 
  let headers = 
    String.concat " "
      (List.map (add "-I ") ocamlc_include)
  in
  let hseq_headers = 
    String.concat " "
      (List.map (add "-I ") hseq_include)
  in 
  let libs = 
    String.concat " "
      (List.map natlib ocamlc_libs)
  in 
  let hseqlib = 
    String.concat " "
      (List.map natlib hseq_libs)
  in 
    String.concat " "
      [pp; headers; hseq_headers; libs; hseqlib ]


let make_info() =
  if (options.native)
  then make_nat_info()
  else make_byte_info()

let print_info info =
  Format.printf "@[%s@]@." info;
  0

let compile info args = 
  let _ = 
    if args = []
    then error "Nothing to do"
    else 0
  in 
  let compiler = 
    if (options.native)
    then ocamlopt
    else ocamlc
  in 
  let arg_string = String.concat " " args
  in 
  let command = 
    String.concat " "
      [compiler; info; arg_string]
  in 
    (if options.verbose
    then Format.printf "@[%s@]@." command
    else ());
    Sys.command command 

let main() = 
  let info = make_info ()
  in 
    if (options.info)
    then print_info info
    else compile info (List.rev (!other_args))

let _ = 
  parse_args();
  let ret = main()
  in
  exit ret
