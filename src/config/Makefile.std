#####
# Standard definitions and settings 
# for source directory makefiles
#####

##
# Utility functions
## 

# mlfile
export mlfile = $(addsuffix .ml,$(1))

# header
export header = $(addsuffix .mli,$(1))

# interface
export interface = $(addsuffix .cmi,$(1))

# bytecode: Add byte-code suffix
export bytecode = $(addsuffix .cmo,$(1))

# natcode: Add native-code suffix
export natcode = $(addsuffix .cmx,$(1))

# objcode: Add object-code suffix
export objcode = $(addsuffix .o,$(1))

# bytelib: Add byte-lib suffix
export bytelib = $(addsuffix .cma,$(1))

# natlib: Add native-lib suffix
export natlib = $(addsuffix .cmxa,$(1))

# objlib: Add object-lib suffix
export objlib = $(addsuffix .a,$(1))

###
# Common Targets
###

## General targets

.PHONY: all  	# all: Build everything
.PHONY: lib  	# lib: Build the library file
.PHONY: opt  	# opt: Build the native code library file
.PHONY: install # install: Install the library and header files.
.PHONY: doc  	# doc: Generate the code documentation

## Cleaning targets
.PHONY: clean
.PHONY: libclean
.PHONY: reallyclean
.PHONY: docclean


## build targets

.PHONY: build-headers build-code build-bytecode build-natcode
.PHONY: install-headers install-code install-bytecode install-natcode
.PHONY: install-other

##
# File commands
##

# CMDSFILE: File defining OS Commands to use in the build

ifdef CMDSFILE
  include $(CMDSFILE)
endif

## Set undefined file commands

## CHDIR: Change directory
#export CHDIR ?= cd

## MKDIR: Make a directory
#export MKDIR ?= mkdir 

## RMDIR: Remove a directory
#export RMDIR ?= rmdir

## COPY: Copy one or more files
#export COPY ?= cp -f

## RM: Delete one or more files
#export RM ?= rm -f

## SKIP: Do nothing
#export SKIP ?=

##
# Build commands
##

## Make settings

# BAREMAKE: The make with not options
export BAREMAKE = make 

# DMAKE: The make to build sub-directories with.
export DMAKE = make $(MAKEOPTIONS)

# MAKECLEAN: The make to clean up with
export MAKECLEAN = make NODEPEND=true $(MAKEOPTIONS)


## Compiler settings

# Flags:
#   FAST: Use the fast compilers
#
# Options:
#   OCAMLC_OPTIONS: options for ocamlc
#   OCAMLOPT_OPTIONS: options for ocamlopt
#   OCAMLLINK_OPTIONS: options for ocamlc (linker)
#   OCAMLOPTLINK_OPTIONS: options for ocamlopt (linker)
#
#   OCAMLDEP_OPTIONS: options for ocamldep
#
#   OCAMLDOC_OPTIONS: options for ocamldoc

## Set options to null if undefined

OCAMLC_OPTIONS ?=
OCAMLOPT_OPTIONS ?=
OCAMLLINK_OPTIONS ?=
OCAMLOPTLINK_OPTIONS ?=
OCAMLDEP_OPTIONS ?=
OCAMLDOC_OPTIONS ?=

# BAREOCAMLC: The bare OCaml bytecode compiler
export BAREOCAMLC ?= ocamlc

# BAREOCAMLOPT: The bare OCaml native-code compiler
export BAREOCAMLOPT ?= ocamlopt

# OCAMLC: The OCaml byte code compiler
export OCAMLC ?= $(BAREOCAMLC) $(OCAMLC_OPTIONS)

# OCAMLOPT: The OCaml native code compiler
export OCAMLOPT ?= $(BAREOCAMLOPT) $(OCAMLOPT_OPTIONS) 

# OCAMLlink: The OCaml byte-code linker
export OCAMLlink= $(BAREOCAMLC) -a $(OCAMLLINK_OPTIONS)

# OCAMLMKTOP: Make a toplevel
export OCAMLMKTOP = ocamlmktop $(OCAMLMKTOP_OPTIONS)

# OCAMLDEP: The OCaml dependency generator
export OCAMLDEP ?= ocamldep $(OCAMLDEP_OPTIONS)

ifeq '$(FAST)' 'true'

# BAREOCAMLC: The bare OCaml bytecode compiler
export BAREOCAMLC = ocamlc.opt 

# BAREOCAMLOPT: The bare OCaml native-code compiler
export BAREOCAMLOPT = ocamlopt.opt

# OCAMLC: The OCaml bytecode compiler
export OCAMLC = $(BAREOCAMLC) $(OCAMLC_OPTIONS) 

# OCAMLOPT: The OCaml native code compiler
export OCAMLOPT = $(BAREOCAMLOPT) $(OCAMLOPT_OPTIONS) 

# OCAMLOPTlink: The OCaml native-code linker
export OCAMLOPTlink= $(OCAMLOPT) -a $(OCAMLOPTLINK_OPTIONS)

# OCAMLDEP: The OCaml dependency generator
export OCAMLDEP = ocamldep.opt $(OCAMLDEP_OPTIONS)

endif

## Camlp4

## OCAMLPP_OPTIONS : additonal options to pass to camlp4
OCAMLCPP_OPTIONS = 

# OCAMLCPP : the preprocesor
export OCAMLCPP = camlp4 pa_o.cmo pr_o.cmo pa_extend.cmo pa_macro.cmo $(OCAMLCPP_OPTIONS)

## ocamldoc

# OCAMLDOC: The documentation generator
export OCAMLDOC ?= ocamldoc $(OCAMLDOC_OPTIONS)

ifeq '$(FAST)' 'true'

# OCAMLDOC: The documentation generator
export OCAMLDOC = ocamldoc.opt $(OCAMLDOC_OPTIONS)

endif


###
# Suffixes and how to handle them
###

.SUFFIXES: .mli .cmi
.SUFFIXES: .ml .cmo
.SUFFIXES: .cma 
.SUFFIXES: .cmx 
.SUFFIXES: .cmxa 
.SUFFIXES: .mlp

.mlp.ml:
	$(OCAMLCPP) -impl $< -o $@

.mli.cmi: 
	$(OCAMLC) -c $<

.ml.cmo: 
	$(OCAMLC) -c $<

.ml.cmx: 
	$(OCAMLOPT) -c $<


