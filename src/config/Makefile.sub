#####
# Makefile for building sub-directories
#
# Should be called with an instance of Makefile.def
#####

-include Makefile.def

####
# Variables set in Makefile.def
###

###
# Header, code and optimised code files
###

# FILES: The list of file names
FILES ?=

# HEADERS: the list of header (.cmi) files 
HEADERS ?= $(foreach f, $(FILES), $(f).cmi)

# MLHEADERS: the list of ML header (.mli) files 
MLHEADERS ?= $(foreach f, $(FILES), $(f).mli)

# CODE: the list of byte code (.cmo) files 
CODE ?= $(foreach f, $(FILES), $(f).cmo)

# NATCODE: the list of native code (.cmx) files 
NATCODE ?= $(foreach f, $(FILES), $(f).cmx)

###
# Generated libraries
###

# LIBFILES: The list of library files built
LIBFILES ?= 

# BYTELIBS: The list of library (.cma) files built
BYTELIBS ?= $(foreach f, $(LIBFILES), $(f).cma)

# NATLIBS: The list of native code library (.cmxa) files built
NATLIBS ?= $(foreach f, $(LIBFILES), $(f).cmxa)

###
# Documentation
###

DOCTYPE ?= -html

# DOCFILES: File from which documentation is to be built
DOCFILES ?= $(MLHEADERS)

# DOCDATA: File to be emitted as a link
DOCDATA ?= 

# DOCPREV: File to be loaded as a link to previous documentation
# (using -load)
DOCPREV ?= 


###
# End of Makefile.def variables
###

##
# Directories
##

# SRCDIR: The source directory (relative to a sub-directory).
SRCDIR ?= ..

# CONFIGDIR: The configuration directory
CONFIGDIR ?= $(SRCDIR)/config

# CONFIGFILE: The configuration file
CONFIGFILE ?= $(CONFIGDIR)/data.make

# HEADERSDIR: The location of the compiled header files
HEADERSDIR ?= $(SRCDIR)/lib

# LIBDIR: The location of the compiled files
LIBDIR ?= $(SRCDIR)/lib

# DOCDIR: Source code documentation directory
DOCDIR ?= $(SRCDIR)/doc

###
# Configuration variables
# Set by data.make
###

# Read from $(CONFIGFILE)
ifdef CONFIGFILE
-include $(CONFIGFILE)
endif

# Variables which are set in $(CONFIGFILE)
Bin ?= 
Prefix ?= 
BinDir ?= 
BaseDir ?= 
IncludeDir ?= 
LibDir ?= 
ThyDir ?= 

# IBINFILE: The installed binary
IBINFILE ?= $(BINFILE)

# IPREFIX: The installation prefix
IPREFIX ?= $(Prefix)

# IBINDIR: Installation binary directory
IBINDIR ?= $(BinDir)

# IBASEDIR: Installation directory
IBASEDIR ?= $(strip $(BaseDir))

# ILIBDIR: Installation library directory
ILIBDIR ?= $(LibDir)

# ITHYDIR: Installation theory directory
ITHYDIR ?= $(ThyDir)

# IDOCDIR: Installation documentation directory
IDOCDIR ?= $(IBASEDIR)/doc/source

# FASTCOMP: whether to use the fast compilers
ifndef FASTCOMP
export FASTCOMP = $(FastCompilers)
endif

##
# Load the OS commands
##
include $(CONFIGDIR)/Makefile.os

##
# Compiler definitions
##

# PPCODE: The preprocessor code
PPCODE ?= $(LIBDIR)/tpquote.cma

# PPOPTIONS: Preprocessor options 
# To avoid using the preprocessor, 
# set PPOPTIONS = "" (i.e. an empty value)
ifneq (($strip $(PPOPTIONS)), "")
PPOPTIONS ?= -pp "camlp4o q_MLast.cmo $(PPCODE) pa_extend.cmo" -I +camlp4
endif

# OPTIONS: The compiler options
OPTIONS = $(PPOPTIONS)

# INCLUDE: The include directives
INCLUDE = -I $(HEADERSDIR)

# DOCLOAD: The previous documentation link
ifeq ($(DOCPREV),) 
DOCLOAD = 
else
DOCLOAD = -load "$(DOCDIR)/$(DOCPREV)"
endif

# DOCDUMP The documentation link
ifeq ($(DOCDATA),) 
DOCDUMP = 
else
DOCDUMP = -dump "$(DOCDIR)/$(DOCDATA)"
endif

##
# The compilers
##

# Flags:
# FASTCOMP: Use the fast compilers

# OCAMLC: The OCaml byte code compiler
OCAMLC= ocamlc $(OPTIONS) 

# OCAMLNATC: The OCaml native code compiler
OCAMLNATC= ocamlnat $(OPTIONS) 

# OCAMLDEP: The OCaml dependency generator
OCAMLDEP = ocamldep $(PPOPTIONS)

# OCAMLDOC: The documentation generator
OCAMLDOC = ocamldoc 

ifeq ($(FASTCOMP), true)

# OCAMLC: The OCaml bytecode compiler
OCAMLC= ocamlc.opt $(OPTIONS) 

# OCAMLCNAT: The OCaml native code compiler
OCAMLCNAT= ocamlnat $(OPTIONS) 

# OCAMLDEP: The OCaml dependency generator
OCAMLDEP = ocamldep.opt $(PPOPTIONS)

# OCAMLDOC: The documentation generator
OCAMLDOC = ocamldoc.opt 

endif

# OCAMLlink: The OCaml byte-code linker
OCAMLlink= $(OCAMLC) -custom -c $(INCLUDE) $(OCLIBS) 

# OCAMLNATlink: The OCaml native-code linker
OCAMLNATlink= $(OCAMLCNAT) -c $(INCLUDE) $(OCLIBS) 

# OCAMLCPP : the preprocesor
OCAMLCPP = camlp4 pa_o.cmo pr_o.cmo pa_extend.cmo pa_macro.cmo -I$(CONFIGDIR) 

# OCAMLMKTOP: Make a toplevel
OCAMLMKTOP = ocamlmktop -custom $(INCLUDE) $(OCINCLUDE) $(OCLIBS)

###
# Suffixes and how to handle them
###

.SUFFIXES: .mli .cmi
.SUFFIXES: .ml .cmo
.SUFFIXES: .cma 
.SUFFIXES: .cmx 
.SUFFIXES: .cmxa 
.SUFFIXES: .mlp

.mlp.ml:
	$(OCAMLCPP) -impl $< -o $@

.mli.cmi: 
	$(OCAMLC) -c $(INCLUDE) $<

.ml.cmo: 
	$(OCAMLC) -c $(INCLUDE) $<

.ml.cmx: 
	$(OCAMLOPT) -c $(INCLUDE) $<

.cmo.cma:
	$(OCAMLC) -a $(INCLUDE) $<

.cmx.cmxa:
	$(OCAMLOPT) -a $(INCLUDE) $<


###
# Build targets
###

# all: Build everything
all: $(HEADERS) $(CODE)

# lib: Build the library file
lib: all $(BYTELIBS)

# lib: Build the native code library file
opt: $(NATLIBS)

# install: Install the library and header files.
ifdef CUSTOM_INSTALL
	$(CUSTOM_INSTALL)
else	
install: lib
	$(COPY) $(BYTELIBS) $(LIBDIR)
	$(COPY) $(HEADERS) $(HEADERSDIR)
	$(COPY) $(MLHEADERS) $(HEADERSDIR)
endif

# installopt: Install the native code library and header files.
installopt: opt
ifdef CUSTOM_OPTINSTALL
	$(CUSTOM_OPTINSTALL)
else	
	$(COPY) $(NATLIBS) $(LIBDIR)
	$(COPY) $(HEADERS) $(HEADERSDIR)
	$(COPY) $(MLHEADERS) $(HEADERSDIR)
endif

#doc: Generate the code documentation
doc: $(DOCFILES)
ifneq ($(strip $(DOCFILES)), "")
	$(OCAMLDOC) $(DOCLOAD) $(DOCDUMP) \
		$(INCLUDE) $(DOCTYPE) $(DOCOPTIONS) \
		-d $(DOCDIR) $(DOCFILES)
endif

##
# Libraries
##

# The standard library
$(BYTELIBS): $(HEADERS) $(CODE)
	$(foreach f,$(BYTELIBS),\
		$(OCAMLC) -o $(f) -a $(INCLUDE) $(CODE); )

# The native code library
$(NATLIBS): $(HEADERS) $(NATCODE)
	$(foreach f,$(BYTELIBS),\
		$(OCAMLOPT) -o $(f) -a $(INCLUDE) $(CODE);)


##
# Cleaning files
##

clean:
	$(RM) *.cmo
	$(RM) *.cmx  
	$(RM) *.o
	$(RM) *~

libclean: 
	$(RM) *.cmi
	$(RM) *.cma 
	$(RM) *.cmxa

reallyclean: clean libclean
	$(RM) depend

##
# Dependencies
#
# Define NODEPEND to prevent using depend
##

depend: 
	-$(OCAMLDEP) *.mli *.ml > depend

ifndef NODEPEND
include depend
endif

