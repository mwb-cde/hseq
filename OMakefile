#######################################################################
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this file, to deal in the File without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the File, and to permit persons to whom the
# File is furnished to do so, subject to the following condition:
#
# THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE FILE OR
# THE USE OR OTHER DEALINGS IN THE FILE.

########################################################################

###
# OMakefile for HSeq theorem prover
# Author: M Wahab <mwahab@users.sourceforge.net>
# Copyright M Wahab 2006
###

###
# Variables
###

# BINFILE: The name of the executable
BINFILE = hseq

# The source directory
SRCDIR = $(dir src)

# The theories directory
THYDIR = $(dir thys)

# The documentation directory
DOCDIR = $(dir doc)

# SUBDIRS: The sub-directories to build (in order) 
SUBDIRS = $(SRCDIR) $(THYDIR)

# DOCSUBDIRS: The sub-directories containing documentation
DOCSUBDIRS = $(DOCDIR)

####
# Don't modify anything below this line
####

##
# Constants
##

# CONFIGDIR: The configuration directory
CONFIGDIR = $(dir config)

# CONFIGFILE: Configuration data file 
CONFIGFILE = $(file $(CONFIGDIR)/data.make)

##
# Commands
##

# CHDIR: Change directory
CHDIR = cd

# MKDIR: Make a directory
MKDIR = mkdir 

# RMDIR: Remove a directory
RMDIR = rmdir

# COPY: Copy one or more files
COPY = cp -f

# RM: Delete one or more files
RM = rm -f

##
# Variables which should be set in $CONFIGFILE)
##

Bin = 
Prefix = 
BinDir = 
BaseDir = 
IncludeDir = 
LibDir = 
ThyDir = 

FastCompilers = false
NativeCompilers = false

## Read from $(CONFIGFILE)

if $(defined CONFIGFILE)
  include $(CONFIGFILE)
  export

NATIVE = false
if $(equal $(NativeCompilers), true)
  NATIVE = true
  export

###
# Common definitions
##

# How a program is named
Program(files) =
  if $(equal $(OSTYPE), Win32)
    return $(addsuffix .exe,$(files))
  else
    return $(files)

# The documentation generator
OCAMLDOC = ocamldoc

if $(exists-in-path ocamldoc.opt)
  OCAMLDOC = ocamldoc.opt
  export

# Stringify(str): Replace spaces in strings with '\ '
Stringify (str) =
  return $(concat \\ , $(array $(str)))

# MkDir: Make a directory
MkDir(tag, name, dep) =
  .PHONY: $(tag)
  $(tag): $(if $(not $(equal $(dep), "")), $(dep))
     -$(MKDIR) $(name)

##
# Installation settings
##

# SBaseDir: The stringified $(BaseDir)
SBaseDir = $(Stringify $(BaseDir))

# SBinDir: The stringified $(BinDir)
SBinDir = $(Stringify $(BinDir))

# IPREFIX: The installation prefix
IPREFIX = $(Prefix)

# IBASEDIR: Installation directory
IBASEDIR = $(BaseDir)

# IDOCDIR: The documentation installation directory
IDOCDIR = $(IBASEDIR)/doc

# ILIBDIR: Library installation directory
ILIBDIR = $(IBASEDIR)/lib

# ITHYDIR: Theory installation directory
ITHYDIR = $(IBASEDIR)/thys

# IBINDIR: Binary installation directory
IBINDIR = $(BinDir)

# ISDOCDIR: The name of the installation directory for 
# the source code documentation
ISDOCDIR = $(IDOCDIR)/source

##
# Compile native or byte code?
##

BYTE_ENABLED = true

if $(NATIVE)
  NATIVE_ENABLED = true
else
  NATIVE_ENABLED = false

##
# Targets
##

# all: Build everything
.PHONY: all  
# build: Build everything
.PHONY: build  
# install: Install everything
.PHONY: install 

# doc: Build the documentation
.PHONY: doc

.PHONY: build-hseq # Build the theorem prover
.PHONY: build-hseqlib # Build the theorem prover
.PHONY: build-thys # Build the theories
.PHONY: build-srcdoc # Build the source documentation 
.PHONY: build-doc  # Build the documentation

.PHONY: install-hseq # Install the theorem prover
.PHONY: install-thys # Install the theories
.PHONY: install-doc  # Install the documentation
.PHONY: install-srcdoc # Install the source code documentation

.PHONY: clean
.PHONY: libclean
.PHONY: reallyclean
.PHONY: docclean

##
# How to create the installation directory
##

#IDIRS = $(IDOCDIR) $(ILIBDIR) $(ITHYDIR) $(IBINDIR)

#MkIDirs (idirs) =
#  ndirs = $(filter-out $(IBASEDIR), $(set $(idirs)))
#  foreach (d, $(ndirs))
#    $(d): $(IBASEDIR)
#      -$(MKDIR) $(d)

#$(IBASEDIR):
#  -$(MKDIR) $@

#MkIDirs($(IDIRS))

MkDir(make-ibasedir, $(IBASEDIR), "")
MkDir(make-idocdir, $(IDOCDIR), make-ibasedir)
MkDir(make-ilibdir, $(ILIBDIR), make-ibasedir)
MkDir(make-ithydir, $(ITHYDIR), make-ibasedir)
MkDir(make-ibindir, $(IBINDIR), make-ibasedir)
MkDir(make-isdocdir, $(ISDOCDIR), make-idocdir)


##
# The default target
##
.DEFAULT: build

build: build-hseq build-thys

section 
  INSTALL_TARGETS = build install-hseq install-thys

  if $(not $(equal $(OSTYPE), Win32))
    INSTALL_TARGETS += install-doc
    export

  install: $(INSTALL_TARGETS)

###
# Clean up
###

clean: 
  -$(RM) *~

reallyclean: clean
  $(RM) $(filter-proper-targets $(ls R, .))

########################################################################
# Subdirectories.
# You may want to include some subdirectories in this project.
# If so, define the subdirectory targets and uncomment this section.
#

## Some usefull definitions

# BINPROG: The program name
BINPROG = $(Program $(BINFILE))

# IBINPROG: The installed program
IBINPROG = $(IBINDIR)/$(BINPROG)

.SUBDIRS: $(SUBDIRS) $(DOCSUBDIRS)

########################################################################
# OCaml configuration.
# Delete this section if you are not building OCaml files.
#

################################################
# Configuration.  You may want to modify any of these configuration
# variables.
#

# OCAMLC = ocamlc.opt
# OCAMLOPT = ocamlopt.opt
# CAMLP4 = camlp4
# OCAMLLEX = ocamllex
# OCAMLYACC = ocamlyacc
# OCAMLDEP = ocamldep
# OCAMLMKTOP = ocamlmktop
# OCAMLLINK = ocamlc.opt
# OCAMLOPTLINK = ocamlopt.opt

#
# Include path
#
# INCLUDES += lib
# OCAMLINCLUDES += lib

#
# Compile native or byte code?
#
# BYTE_ENABLED = true
# NATIVE_ENABLED = true

#
# Various options
#
# OCAMLFLAGS    +=
# OCAMLCFLAGS   +=
# OCAMLOPTFLAGS +=
# OCAML_LINK_FLAGS +=
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=

################################################
# Build an OCaml library
#

# FILES =
# LIB =
# OCamlLibrary($(LIB), $(FILES))
#
# .DEFAULT: $(LIB).cma

################################################
# Build an OCaml program
#

# FILES =
# PROGRAM =
# OCAML_LIBS +=
# OCAML_CLIBS +=
# OCAML_OTHER_LIBS +=
# OCAML_LIB_FLAGS +=
# OCamlProgram($(PROGRAM), $(FILES))
# .DEFAULT: $(PROGRAM).run


###
# Targets
##

# install: Install the library and header files.
#if $(defined CUSTOM_INSTALL)
#	$(CUSTOM_INSTALL)
#else	
#install: $(LIBFILE)
#	$(COPY) $(LIBFILE) $(LIBDIR)
#	$(COPY) $(HEADERS) $(HEADERSDIR)
#	$(COPY) $(replacesuffixes .cmi, .mli, $(HEADERS)) $(HEADERSDIR)
#endif
