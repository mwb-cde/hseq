###################################################### --*- Makefile -*--
# Makefile.rules - Common make rules for building HSeq modules
# Copyright 2011-2016, Matthew Wahab <mwb.cde@gmail.com>
#
# Released under the Lesser GPLv3 license:
# ========================================
# This file is part of HSeq.
#
# HSeq is free software; you can redistribute it and/or modify it under the
# terms of the Lesser GNU General Public License as published by the Free
# Software Foundation; either version 3, or (at your option) any later
# version.
#
# HSeq is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the Lesser GNU General Public License for
# more details.
#
# You should have received a copy of the Lesser GNU General Public License
# along with HSeq.  If not see <http://www.gnu.org/licenses/>.
######################################################################

#####
# Definitions and rules for Makefiles that build modules.
#
# This Makefile provides the necessary infrastructure for building modules and
# should be included from instances of Makefile.module.
#
# Requires:
# PROJ_ROOT: Variable containing relative path to top of the source tree.
#
# Provides:
# SRC_ROOT: Absolute path to root of the source tree.
#####

###
# Default target
###
.PHONY: all
all: build

###
# Include the common settings.
#

# PROJ_ROOT: Relative path to the top of the source tree is required.
ifndef PROJ_ROOT
$(error Error: variable PROJ_ROOT not set when using Makefile in directory $(CURDIR))
endif

include $(PROJ_ROOT)/Makefile.common

###
# Makefile debugging

# Uncomment to generate debug messages
#lm-DEBUG-MAKEFILE:=yes

###
# Values that are passed in.
$(info Directory $(CURDIR))

ifdef lm-DEBUG-MAKEFILE
$(info GLOBAL_OCAMLPP_FLAGS = $(GLOBAL_OCAMLPP_FLAGS))
$(info GLOBAL_OCAMLDEP_FLAGS = $(GLOBAL_OCAMLDEP_FLAGS))
$(info GLOBAL_OCAMLC_FLAGS = $(GLOBAL_OCAMLC_FLAGS))
$(info GLOBAL_LINK_FLAGS = $(GLOBAL_LINK_FLAGS))
$(info GLOBAL_OCAMLNAT_FLAGS = $(GLOBAL_OCAMLNAT_FLAGS))
$(info GLOBAL_LINKNAT_FLAGS = $(GLOBAL_LINKNAT_FLAGS))
$(info GLOBAL_OCAMLCPP_FLAGS = $(GLOBAL_OCAMLCPP_FLAGS))
endif

ifdef lm-DEBUG-MAKEFILE
$(info lm-installdir-lib=$(lm-installdir-lib))
$(info lm-installdir-bin=$(lm-installdir-bin))
$(info lm-installdir-data=$(lm-installdir-data))
$(info lm-installdir-doc=$(lm-installdir-doc))
endif

####
# Utility functions
####

# mlfile: Add ML source suffix to a name
export mlfile=$(addsuffix .ml,$(1))

# header: Add ML header suffix to a name
export header=$(addsuffix .mli,$(1))

# interface: Add ML object interface suffix to a nanme
export interface=$(addsuffix .cmi,$(1))

# bytecode: Add ML object file suffix to a name
export bytecode=$(addsuffix .cmo,$(1))

# natcode: Add ML native-code file suffix to a name
export natcode=$(addsuffix .cmx,$(1))

# objcode: Add system object-code suffix to a name
export objcode=$(addsuffix .o,$(1))

# bytelib: Add byte-lib suffix to a name
export bytelib=$(addsuffix .cma,$(1))

# natlib: Add native-lib suffix to a name
export natlib=$(addsuffix .cmxa,$(1))

# objlib: Add object-lib suffix to a name
export objlib=$(addsuffix .a,$(1))

##
# Suffixes and their build rules.
##

.SUFFIXES: .mli .cmi
.SUFFIXES: .ml .cmo
.SUFFIXES: .cma
.SUFFIXES: .cmx
.SUFFIXES: .cmxa
.SUFFIXES: .mlp

%.ml: %.mlp
	$(OCAMLCPP) $(LOCAL_OCAMLCPP_FLAGS) -impl $< -o $@

%.cmi: %.mli
	$(OCAMLC) -c $<

%.cmo: %.ml
	$(OCAMLC) -c $<

%.cmx: %.ml
	$(OCAMLNAT) -c $<


###
# Values

# lm-lib-dirname: Library directory name
lm-lib-dirname=lib

# lm-header-dirname: Library directory name
lm-header-dirname=lib

# lm-bin-dirname: Binary directory name
lm-bin-dirname=bin

# lm-doc-dirname: Document directory name
lm-doc-dirname=doc

# lm-nativecode: Defined iff compile-to-native code is supported.
ifneq ($(strip "$(ENABLE_NATIVECODE)"),"false")
lm-nativecode:=true
endif

ifdef lm-nativecode
ifdef lm-DEBUG-MAKEFILE
$(info Compilation to native code is supported.)
endif
else
ifdef lm-DEBUG-MAKEFILE
$(info Compilation to native code is not supported.)
endif
endif

####
# Targets:
# --------
#
# all: synonymous with build.
# build: Build the module. (required)
# install: Install the module. (required)
# doc: Generate documentation.
# clean: Delete all built objects.
# libclean: Delete libraries only.
# distclean: Pristine clean.
# depend: Calculate dependencies
#
#
# Build order:
#
# 1) Run the preprocessor on .mlp files.
#
# 2) Build interface from .mli files.
#
#    This has to be done before building object files otherwise ocaml
#    will generate an interface for each .ml file as it is compile,
#    possibly exposing values that were meant to be internal to the
#    .ml file.
#
# 3) Build objects from .ml files.
#
# 4) Build libraries from .ml files.
#
# Notes:
#
# Native code compilation should use the -dllpath option to ocamlc to
# pass the library install-directory. This is needed so that the
# libraries can be found after installation.
#

########
# subdir-targets-template($1): Targets for sub-directory $(1).
define subdir-targets-template

.PHONY: all-subdir-$(1)
all-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) all

.PHONY: depend-subdir-$(1)
depend-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) depend

.PHONY: build-subdir-$(1)
build-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) build

.PHONY: install-subdir-$(1)
install-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) install

.PHONY: clean-subdir-$(1)
clean-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) clean

.PHONY: libclean-subdir-$(1)
libclean-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) libclean

.PHONY: distclean-subdir-$(1)
distclean-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) distclean
endef
########

########
# make-dir-template($1): Make a directory named $(1)
define make-dir-template
$(1):
	$$(MKDIR) $(1)
endef
########

########
# library-targets-template($1): Targets for library $(1).
#
# Arguments
#  $(1): Library to build.
#  $(1)_SOURCES: Source files [required].
#  $(1)_PACK_NAME: Pack name.
#  $(1)_INCLUDE: Directories to add to the include list.
#  $(1)_HEADERS: Header files [default: $(1)_SOURCES].
#  $(1)_LIBS: Additional libraries to link in.
#  $(1)_BYTELIBS: Extra libraries to add to the byte-code library variant.
#  $(1)_NATLIBS: Extra libraries to add to the native-code library variant.
#  $(1)_EXTRA_FILES: Extra files to install alongside the library.
#  $(1)_INSTALLDIR: Installation directory. [default: $INSTALLDIR_LIB].

define library-targets-template

ifdef lm-DEBUG-MAKEFILE
$$(info Library $(1))
$$(info $(1)_SOURCES=$$($(1)_SOURCES))
$$(info $(1)_HEADERS=$$($(1)_HEADERS))
$$(info $(1)_LIBS=$$($(1)_LIBS))
$$(info $(1)_BYTELIBS=$$($(1)_BYTELIBS))
$$(info $(1)_NATLIBS=$$($(1)_NATLIBS))
endif

# Sources and objects.
ifneq ($$(origin $(1)_HEADERS),undefined)
lm-lib-$(1)-headers=$$($(1)_HEADERS)
else
lm-lib-$(1)-headers=$$($(1)_SOURCES)
endif

lm-lib-$(1)-mlheaders:=\
	$$(foreach src,$$(lm-lib-$(1)-headers),$$(call header,$$(src)))

lm-lib-$(1)-interfaces:=\
	$$(foreach src,$$(lm-lib-$(1)-headers),$$(call interface,$$(src)))

lm-lib-$(1)-objects:=\
	$$(foreach src,$$($(1)_SOURCES),$$(call bytecode,$$(src)))

lm-lib-$(1)-libs:=$$($(1)_LIBS)

lm-lib-$(1)-bytelib:=$(call bytelib,$(1))

lm-lib-$(1)-natobjects:=\
	$$(foreach src,$$($(1)_SOURCES),$$(call natcode,$$(src)))

lm-lib-$(1)-cobjects:=\
	$$(foreach src,$$($(1)_SOURCES),$$(call objcode,$$(src)))

lm-lib-$(1)-nat-libs:=$$($(1)_NATLIBS)

lm-lib-$(1)-natlib:=$(call natlib,$(1))
lm-lib-$(1)-clib:=$(call objlib,$(1))

lm-lib-$(1)-extra-files:=$$($(1)_EXTRA_FILES)

# The installation directory.
ifneq ($$(origin $(1)_INSTALLDIR),undefined)
lm-lib-$(1)-installdir-lib:=$$($(1)_INSTALLDIR)
else
lm-lib-$(1)-installdir-lib:=$$(lm-installdir-lib)
endif

ifdef lm-DEBUG-MAKEFILE
$$(info lm-lib-$(1)-headers=$$(lm-lib-$(1)-headers))
$$(info lm-lib-$(1)-interfaces=$$(lm-lib-$(1)-interfaces))
$$(info lm-lib-$(1)-objects=$$(lm-lib-$(1)-objects))
$$(info lm-lib-$(1)-libs=$$(lm-lib-$(1)-libs))
$$(info lm-lib-$(1)-bytelib=$$(lm-lib-$(1)-bytelib))
$$(info lm-lib-$(1)-natobjects=$$(lm-lib-$(1)-natobjects))
$$(info lm-lib-$(1)-cobjects=$$(lm-lib-$(1)-cobjects))
$$(info lm-lib-$(1)-nat-libs=$$(lm-lib-$(1)-nat-libs))
$$(info lm-lib-$(1)-natlib=$$(lm-lib-$(1)-natlib))
$$(info lm-lib-$(1)-clib=$$(lm-lib-$(1)-clib))
$$(info lm-lib-$(1)-extra-files=$$(lm-lib-$(1)-extra-files))
endif

# Build options.
lm-lib-$(1)-ocamlc-options:=\
	$$($(1)_OCAMLC_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir)) \
	$$(lm-module-ocamlc-options)

lm-lib-$(1)-link-options:=\
	$$($(1)_LINK_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir)) \
	$$(lm-module-link-options)

lm-lib-$(1)-ocamlnat-options:=\
	$$($(1)_OCAMLNAT_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir)) \
	$$(lm-module-ocamlnat-options)

lm-lib-$(1)-linknat-options:=\
	$$($(1)_LINKNAT_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir)) \
	$$(lm-module-linknat-options)

lm-lib-$(1)-ocamldep-options:=$$(lm-module-ocamldep-options)

lm-lib-$(1)-ocamlcpp-options:=$$(lm-module-ocamlcpp-options)

ifdef lm-DEBUG-MAKEFILE
$$(info lm-lib-$(1)-ocamlc-options=$$(lm-lib-$(1)-ocamlc-options))
$$(info lm-lib-$(1)-link-options=$$(lm-lib-$(1)-link-options))
$$(info lm-lib-$(1)-ocamlnat-options=$$(lm-lib-$(1)-ocamlnat-options))
$$(info lm-lib-$(1)-linknat-options=$$(lm-lib-$(1)-linknat-options))
$$(info lm-lib-$(1)-ocamldep-options=$$(lm-lib-$(1)-ocamldep-options))
$$(info lm-lib-$(1)-ocamlcpp-options=$$(lm-lib-$(1)-ocamlcpp-options))
endif

# Package objects and build ruiles.
ifeq ($$(origin $(1)_PACK_NAME),undefined)
# No packing. Empty object definitions and no build rules.
lm-lib-$(1)-pack-intf:=
lm-lib-$(1)-pack-object:=
lm-lib-$(1)-pack-natobject:=
lm-lib-$(1)-pack-cobject:=
lm-lib-$(1)-for-pack-opt:=
lm-lib-$(1)-final-intfs:=$$(lm-lib-$(1)-interfaces)
lm-lib-$(1)-final-objects:=$$(lm-lib-$(1)-objects)
lm-lib-$(1)-final-natobject:=\
	$$(lm-lib-$(1)-natobjects) $$(lm-lib-$(1)-cobjects)
else
# Build a package.
lm-lib-$(1)-pack-intf:=$$(call interface,$$($(1)_PACK_NAME))
lm-lib-$(1)-pack-object:=$$(call bytecode,$$($(1)_PACK_NAME))
lm-lib-$(1)-pack-natobject:=$$(call natcode,$$($(1)_PACK_NAME))
lm-lib-$(1)-pack-cobject:=$$(call objcode,$$($(1)_PACK_NAME))
lm-lib-$(1)-for-pack-opt:=-for-pack $$($(1)_PACK_NAME)
lm-lib-$(1)-final-intfs:=\
	$$(lm-lib-$(1)-pack-intf) $$(lm-lib-$(1)-interfaces)
lm-lib-$(1)-final-objects:=$$(lm-lib-$(1)-pack-object)
lm-lib-$(1)-final-natobject:=$$(lm-lib-$(1)-pack-natobject)

# Build rules.
$$(lm-lib-$(1)-pack-object): $$(lm-lib-$(1)-interfaces) \
				$$(lm-lib-$(1)-objects)
	$$(info Compiling $(1) byte-code package $$(lm-lib-$(1)-pack-object))
	$$(OCAMLC) -pack -o $$(lm-lib-$(1)-pack-object) \
		$$(lm-lib-$(1)-objects)

$$(lm-lib-$(1)-pack-intf): $$(lm-lib-$(1)-pack-object)

$$(lm-lib-$(1)-pack-natobject): $$(lm-lib-$(1)-interfaces) \
				$$(lm-lib-$(1)-natobjects) \
				$$(lm-lib-$(1)-cobjects)
	$$(info Compiling $(1) native-code package)
	$$(OCAMLNAT) -pack -o $$(lm-lib-$(1)-pack-name).cmx \
		$$(lm-lib-$(1)-natobjects)
endif

###
# Bytecode rules.

# Interfaces.
$$(lm-lib-$(1)-interfaces): %.cmi: %.mli
	$(OCAMLC) $$(lm-lib-$(1)-for-pack-opt) \
		$$(lm-lib-$(1)-ocamlc-options) -c $$<

# Bytecode object files.
$$(lm-lib-$(1)-objects): %.cmo: %.ml
	$(OCAMLC) $$(lm-lib-$(1)-for-pack-opt) \
		$$(lm-lib-$(1)-ocamlc-options) -c $$<

# Native-code object files.
$$(lm-lib-$(1)-natobjects): %.cmx: %.ml
	$(OCAMLNAT) $$(lm-lib-$(1)-for-pack-opt) \
		$$(lm-lib-$(1)-ocamlnat-options) -c $$<

$$(lm-lib-$(1)-cobjects): %.o: %.cmx

ifneq ($$(strip $$($(1)_CUSTOM_BUILD)),yes)
# Bytecode library.
$$(lm-lib-$(1)-bytelib): $$(lm-lib-$(1)-final-intfs) \
				$$(lm-lib-$(1)-final-objects)
	$$(info Linking $(lm-lib-$(1)-bytelib))
	$$(OCAMLLINK) $$(lm-lib-$(1)-link-options) \
		-o $$(lm-lib-$(1)-bytelib) \
		$$(lm-lib-$(1)-libs) $$(lm-lib-$(1)-final-objects)

# Native-code library..
$$(lm-lib-$(1)-natlib) $$(lm-lib-$(1)-clib): \
		$$(lm-lib-$(1)-final-intfs) \
		$$(lm-lib-$(1)-final-natobjects) \
		$$(lm-lib-$(1)-final-cobjects)
	$$(info Linking $(lm-lib-$(1)-natlib))
	$$(OCAMLNATLINK) $$(lm-lib-$(1)-linknat-options) \
		-o $$(lm-lib-$(1)-natlib) \
		$$(lm-lib-$(1)-nat-libs) $$(lm-lib-$(1)-final-natobjects)
endif

###
# Toplevel rules

# build
lm-lib-$(1)-target:=$$(lm-lib-$(1)-bytelib)
ifdef lm-nativecode
ifneq ("$$(strip $$(lm-nativecode))","false")
lm-lib-$(1)-target+= $$(lm-lib-$(1)-natlib) $$(lm-lib-$(1)-clib)
endif
endif

ifdef lm-DEBUG-MAKEFILE
$$(info lm-lib-$(1)-target=$$(lm-lib-$(1)-target))
endif

.PHONY: build-lib-$(1)
build-lib-$(1): $$(lm-lib-$(1)-interfaces) $$(lm-lib-$(1)-target)

# Install headers, interfaces and libraries to the lib install directory.
ifdef lm-DEBUG-MAKEFILE
$$(info lm-lib-$(1)-installdir-lib=$$(lm-lib-$(1)-installdir-lib))
endif

lm-lib-$(1)-install-files:=\
	$$(lm-lib-$(1)-final-intfs) $$(lm-lib-$(1)-target)

lm-lib-$(1)-installed-files:=\
	$$(foreach file, $$(lm-lib-$(1)-install-files) \
			 $$(lm-lib-$(1)-extra-files),\
		$$(lm-lib-$(1)-installdir-lib)/$$(file) )

.PHONY: install-lib-$(1)
install-lib-$(1): build-lib-$(1) $$(lm-lib-$(1)-installdir-lib)
	$(COPY) $$(lm-lib-$(1)-install-files) $$(lm-lib-$(1)-extra-files) \
		$$(lm-lib-$(1)-installdir-lib)
	$(CHMOD) $$(lm-file-permissions) $$(lm-lib-$(1)-installed-files)

# clean
.PHONY: clean-lib-$(1)
clean-lib-$(1):
	$$(RM) $$(lm-lib-$(1)-target)
	$$(RM) $$(lm-lib-$(1)-pack-intf) $$(lm-lib-$(1)-interfaces)\
		$$(foreach src,$$($(1)_SOURCES),$$(call interface,$$(src)))
	$$(RM) $$(lm-lib-$(1)-objects) $$(lm-lib-$(1)-natobjects) \
		$$(lm-lib-$(1)-cobjects) $$(lm-lib-$(1)-pack-object) \
		$$(lm-lib-$(1)-pack-natobject) $$(lm-lib-$(1)-pack-cobject)

# libclean
.PHONY: libclean-lib-$(1)
libclean-lib-$(1): clean-lib-$(1)

# distclean
.PHONY: build-lib-$(1)
distclean-lib-$(1): libclean-$(1)

endef # library-targets-template
########

########
# program-targets-template($1): Targets for program $(1).
define program-targets-template

ifdef lm-DEBUG-MAKEFILE
$$(info Program $(1))
$$(info $(1)_SOURCES=$$($(1)_SOURCES))
$$(info $(1)_HEADERS=$$($(1)_HEADERS))
$$(info $(1)_LIBS=$$($(1)_LIBS))
$$(info $(1)_NATLIBS=$$($(1)_NATLIBS))
endif

# Bytecode libraries
ifneq ($$(origin $(1)_HEADERS),undefined)
lm-prog-$(1)-headers=$$($(1)_HEADERS)
else
lm-prog-$(1)-headers=$$($(1)_SOURCES)
endif

lm-prog-$(1)-mlheaders:=$$(foreach src,$$(lm-prog-$(1)-headers),\
				$$(call header,$$(src)))

lm-prog-$(1)-interfaces:=\
	$$(foreach src,$$(lm-prog-$(1)-headers),$$(call interface,$$(src)))

lm-prog-$(1)-objects:=\
	$$(foreach src,$$($(1)_SOURCES),$$(call bytecode,$$(src)))

lm-prog-$(1)-libs:=$$($(1)_LIBS)

lm-prog-$(1)-natobjects:=\
	$$(foreach src,$$($(1)_SOURCES),$$(call natcode,$$(src)))
lm-prog-$(1)-cobjects:=\
	$$(foreach src,$$($(1)_SOURCES),$$(call objcode,$$(src)))

lm-prog-$(1)-nat-libs:=$$($(1)_NATLIBS)

lm-prog-$(1)-program:=$(1)
lm-prog-$(1)-natprogram:=$(1).opt

lm-prog-$(1)-extra-files:=$$($(1)_EXTRA_FILES)

# The installation directory.
ifneq ($$(origin $(1)_INSTALLDIR),undefined)
lm-prog-$(1)-installdir-bin:=$$($(1)_INSTALLDIR)
else
lm-prog-$(1)-installdir-bin:=$$(lm-installdir-bin)
endif

ifdef lm-DEBUG-MAKEFILE
$$(info lm-prog-$(1)-headers=$$(lm-prog-$(1)-headers))
$$(info lm-prog-$(1)-mlheaders=$$(lm-prog-$(1)-mlheaders))
$$(info lm-prog-$(1)-interfaces=$$(lm-prog-$(1)-interfaces))
$$(info lm-prog-$(1)-objects=$$(lm-prog-$(1)-objects))
$$(info lm-prog-$(1)-libs=$$(lm-prog-$(1)-libs))
$$(info lm-prog-$(1)-natobjects=$$(lm-prog-$(1)-natobjects))
$$(info lm-prog-$(1)-cobjects=$$(lm-prog-$(1)-cobjects))
$$(info lm-prog-$(1)-nat-libs=$$(lm-prog-$(1)-nat-libs))
$$(info lm-prog-$(1)-program=$$(lm-prog-$(1)-program))
$$(info lm-prog-$(1)-natprogram=$$(lm-prog-$(1)-natprogram))
$$(info lm-prog-$(1)-extra-files=$$(lm-prog-$(1)-extra-files))
endif

##
# Build options

lm-prog-$(1)-ocamlc-options:=\
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir)) \
	$$(lm-module-ocamlc-options) \
	$$($(1)_OCAMLC_FLAGS)

lm-prog-$(1)-link-options:=\
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir)) \
	$$(lm-module-link-options) \
	$$($(1)_LINK_FLAGS)

lm-prog-$(1)-ocamlnat-options:=\
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir)) \
	$$(lm-module-ocamlnat-options) \
	$$($(1)_OCAMLnat_FLAGS)

lm-prog-$(1)-linknat-options:=\
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir)) \
	$$(lm-module-linknat-options) \
	$$($(1)_LINKNAT_FLAGS) \

lm-prog-$(1)-ocamldep-options:=$$(lm-module-ocamldep-options)

lm-prog-$(1)-ocamlcpp-options:=$$(lm-module-ocamlcpp-options)

ifdef lm-DEBUG-MAKEFILE
$$(info lm-prog-$(1)-ocamlc-options=$$(lm-prog-$(1)-ocamlc-options))
$$(info lm-prog-$(1)-link-options=$$(lm-prog-$(1)-link-options))
$$(info lm-prog-$(1)-ocamlnat-options=$$(lm-prog-$(1)-ocamlnat-options))
$$(info lm-prog-$(1)-linknat-options=$$(lm-prog-$(1)-linknat-options))
$$(info lm-prog-$(1)-ocamldep-options=$$(lm-prog-$(1)-ocamldep-options))
$$(info lm-prog-$(1)-ocamlcpp-options=$$(lm-prog-$(1)-ocamlcpp-options))
endif

###
# Bytecode rules

# Interfaces
$$(lm-prog-$(1)-interfaces): %.cmi: %.mli
	$$(OCAMLC) $$(lm-prog-$(1)-ocamlc-options) -c $$<

# Bytecode object files
$$(lm-prog-$(1)-objects): %.cmo: %.ml
	$$(OCAMLC) $$(lm-prog-$(1)-ocamlc-options) -c $$<

ifneq ($$(strip $$($(1)_CUSTOM_BUILD)),yes)
# Bytecode program
$$(lm-prog-$(1)-program): $$(lm-prog-$(1)-interfaces) $$(lm-prog-$(1)-objects)
	$$(info Linking $(lm-prog-$(1)-program))
	$$(OCAMLC) $$(lm-prog-$(1)-ocamlc-options) \
		-o $$(lm-prog-$(1)-program) \
		$$(lm-prog-$(1)-libs) $$(lm-prog-$(1)-objects)

# Native-code program
$$(lm-prog-$(1)-natprogram): $$(lm-prog-$(1)-interfaces) \
		$$(lm-prog-$(1)-natobjects) $$(lm-prog-$(1)-cobjects)
	$$(info Linking $(lm-prog-$(1)-natprogram))
	$$(OCAMLNAT) $$(lm-prog-$(1)-ocamlnat-options) \
		-o $$(lm-prog-$(1)-natprogram) \
		$$(lm-prog-$(1)-nat-libs) $$(lm-prog-$(1)-natobjects)
endif

lm-prog-$(1)-install-files:=$$(lm-prog-$(1)-program)
ifdef lm-nativecode
ifneq ("$$(strip $$(lm-nativecode))","false")
lm-prog-$(1)-install-files+= $$(lm-prog-$(1)-natprogram)
endif
endif

lm-prog-$(1)-installed-files:=\
	$$(foreach file, $$(lm-prog-$(1)-install-files) \
			 $$(lm-prog-$(1)-extra-files),\
		$$(lm-prog-$(1)-installdir-bin)/$$(file) )

###
# Toplevel rules

# build
.PHONY: build-program-$(1)
build-program-$(1): $$(lm-prog-$(1)-install-files)

# install
.PHONY: install-program-$(1)
install-program-$(1): $$(build-program-$(1)) $$(lm-prog-$(1)-installdir-bin)
	$$(COPY) $$(lm-prog-$(1)-install-files) $$(lm-prog-$(1)-extra-files) \
		$$(lm-prog-$(1)-installdir-bin)
	$(CHMOD) $$(lm-file-permissions) $$(lm-prog-$(1)-installed-files)

# clean
.PHONY: clean-program-$(1)
clean-program-$(1):
	$$(RM) $$(lm-prog-$(1)-interfaces) \
		$$(foreach src,$$($(1)_SOURCES),$$(call interface,$$(src)))
	$$(RM) $$(lm-prog-$(1)-objects) \
		$$(lm-prog-$(1)-natobjects) $$(lm-prog-$(1)-cobjects)
	$$(RM) $$(lm-prog-$(1)-program) $$(lm-prog-$(1)-natprogram)

# libclean
.PHONY: libclean-program-$(1)
libclean-program-$(1): clean-program-$(1)

# distclean
.PHONY: build-program-$(1)
distclean-program-$(1): libclean-program-$(1)

endef # program-targets-template
########

#####################
# Documentation
#
# template doc_TEMPLATE
# Build rules for document $(1).
# Inputs:
#   - $(1)_TEXINFO: Texinfo source files
#   - $(1)_INCLUDE: Include directory
#   - $(1)_OUTPUT: Name of the document [default: $(1)]
#   - $(1)_HTMLDIR: Name of the document html directory
#		    [default: $($(1)_output).html]
#   - $(1)_INFODIR: Name of the document info directory
#		    [default: $($(1)_output).info]
define doc-targets-template

##
# Set variables

# The output name
lm-doc-$(1)-output:=\
	$$(or $$(strip $$($(1)_OUTPUT)),$$(strip $(1)))

# The html directory
lm-doc-$(1)-htmldir:=\
	$$(or $$(strip $$($(1)_HTMLDIR)),$$(lm-doc-$(1)-output).html)

# The info directory
lm-doc-$(1)-infodir:=\
	$$(or $$(strip $$($(1)_INFODIR)),$$(lm-doc-$(1)-output).info)

# Directories to include
lm-doc-$(1)-includedir:=\
	$$(foreach dir,$$($(1)_INCLUDE) $$(MODULE_INCLUDE),-I $$(dir))

# Document sources.
lm-doc-$(1)-sources:= $$($(1)_TEXINFO)

# The installation directory.
lm-doc-$(1)-installdir:=$$(lm-installdir-doc)

# Whether to buid and install the documentation.
ifndef MAKEINFO
# No MAKEINFO program so no documentation.
lm-doc-build-target:=
lm-doc-install-target:=
lm-doc-clean-target:=
else
# MAKEINFO program available so documentation.
lm-doc-build-target:=build-doc
lm-doc-install-target:=install-doc
lm-doc-clean-target:=clean-doc
endif

##
# Build rules

# The html directory
$$(lm-doc-$(1)-htmldir):
	$$(MKDIR) $$(lm-doc-$(1)-htmldir)

$$(lm-doc-$(1)-htmldir)/README.txt: \
		$$(lm-doc-lm-doc-$(1)-htmldir) $$(lm-doc-$(1)-sources)
	$$(MAKEINFO) --html $$(lm-doc-$(1)-includedir) \
		$$(lm-doc-$(1)-sources) \
		-o $$(lm-doc-$(1)-htmldir)
	echo "HTML documentation." > $$(lm-doc-$(1)-htmldir)/README.txt

.PHONY: build-doc-$(1)-html
build-doc-$(1)-html: $$(lm-doc-$(1)-htmldir)/README.txt

# The info directory
$$(lm-doc-$(1)-infodir):
	$$(MKDIR) $$(lm-doc-$(1)-infodir)

$$(lm-doc-$(1)-infodir)/README.txt: \
	$$(lm-doc-$(1)-infodir) $$(lm-doc-$(1)-sources)
	$$(MAKEINFO) --info $$(lm-doc-$(1)-includedir) \
		$$(lm-doc-$(1)-sources) \
		-o $$(lm-doc-$(1)-infodir)
	echo "INFO documentation." > $$(lm-doc-$(1)-infodir)/README.txt

.PHONY: build-doc-$(1)-info
build-doc-$(1)-info: $$(lm-doc-$(1)-infodir)/README.txt

# Install rules.
lm-doc-$(1)-info-installed-files:=\
	$$(lm-doc-$(1)-installdir)/$$(lm-doc-$(1)-infodir)

lm-doc-$(1)-html-installed-files:=\
	$$(lm-doc-$(1)-installdir)/$$(lm-doc-$(1)-infodir)

.PHONY: install-doc-$(1)-info
install-doc-$(1)-info: build-doc-$(1)-info $$(lm-doc-$(1)-installdir)
	$$(COPY) -r $$(lm-doc-$(1)-infodir) $$(lm-doc-$(1)-installdir)
	$$(CHMOD) -R $$(lm-file-permissions) \
			$$(lm-doc-$(1)-info-installed-files)

.PHONY: install-doc-$(1)-html
install-doc-$(1)-html: build-doc-$(1)-html $$(lm-doc-$(1)-installdir)
	$$(COPY) -r $$(lm-doc-$(1)-htmldir) $$(lm-doc-$(1)-installdir)
	$$(CHMOD) -R $$(lm-file-permissions) \
			$$(lm-doc-$(1)-html-installed-files)

# Clean
.PHONY: clean-doc-$(1)-html
clean-doc-$(1)-html:
	$$(RM) -r $$(lm-doc-$(1)-htmldir)

.PHONY: clean-doc-$(1)-info
clean-doc-$(1)-info:
	$$(RM) -r $$(lm-doc-$(1)-infodir)

####
# Toplevel rules

# Build
.PHONY: build-doc-$(1)
build-doc-$(1): build-doc-$(1)-info build-doc-$(1)-html

# install
.PHONY: install-doc-$(1)
install-doc-$(1): install-doc-$(1)-info install-doc-$(1)-html

# Clean
.PHONY: clean-doc-$(1)
clean-doc-$(1): clean-doc-$(1)-info clean-doc-$(1)-html

endef # doc-targets-template
########

######
# Use the templates to build everything in Makefile.module
#

###
# Module settings
#

##
# If LOCAL_X_FLAGS is undefined, use the default.

ifndef LOCAL_OCAMLPP_FLAGS
LOCAL_OCAMLPP_FLAGS:=$(GLOBAL_OCAMLPP_FLAGS) $(MODULE_OCAMLPP_FLAGS)
endif

ifndef LOCAL_OCAMLDEP_FLAGS
LOCAL_OCAMLDEP_FLAGS:=$(GLOBAL_OCAMLDEP_FLAGS) $(MODULE_OCAMLDEP_FLAGS)
endif

ifndef LOCAL_OCAMLC_FLAGS
LOCAL_OCAMLC_FLAGS:=$(GLOBAL_OCAMLC_FLAGS) $(MODULE_OCAMLC_FLAGS)
endif

ifndef LOCAL_LINK_FLAGS
LOCAL_LINK_FLAGS:=$(GLOBAL_LINK_FLAGS) $(MODULE_LINK_FLAGS)
endif

ifndef LOCAL_OCAMLNAT_FLAGS
LOCAL_OCAMLNAT_FLAGS:=$(GLOBAL_OCAMLNAT_FLAGS) $(MODULE_OCAMLNAT_FLAGS)
endif

ifndef LOCAL_LINKNAT_FLAGS
LOCAL_LINKNAT_FLAGS:=$(GLOBAL_LINKNAT_FLAGS) $(MODULE_LINKNAT_FLAGS)
endif

ifndef LOCAL_OCAMLCPP_FLAGS
LOCAL_OCAMLCPP_FLAGS:=$(GLOBAL_OCAMLCPP_FLAGS) $(MODULE_OCAMLCPP_FLAGS)
endif

# lm-module-ocamlpp-options: Module wide ocamlpp flags.
lm-module-ocamlpp-options=$(LOCAL_OCAMLPP_FLAGS)

# lm-module-ocamldep-options: Module wide ocamldep flags.
lm-module-ocamldep-options=$(LOCAL_OCAMLDEP_FLAGS) $(lm-module-ocamlpp-options)

# lm-module-ocamlc-options: Module wide ocamlc flags.
lm-module-ocamlc-options=$(LOCAL_OCAMLC_FLAGS) $(lm-module-ocamlpp-options)

# lm-module-link-options: Module wide link flags.
lm-module-link-options=$(LOCAL_LINK_FLAGS)

# lm-module-ocamlnat-options: Module wide native code compiler flags.
lm-module-ocamlnat-options=$(LOCAL_OCAMLNAT_FLAGS) \
	$(lm-module-ocamlpp-options)

# lm-module-linknat-options: Module wide native code link flags.
lm-module-linknat-options=$(LOCAL_LINKNAT_FLAGS)

# lm-module-ocamlcpp-options: Module wide macro-expander flags.
lm-module-ocamlcpp-options=$(LOCAL_OCAMLCPP_FLAGS)

##
# Options to pass to sub-directorys
lm-module-subdir-args=\
	GLOBAL_OCAMLPP_FLAGS='$(strip $(GLOBAL_OCAMLPP_FLAGS))' \
	GLOBAL_OCAMLDEP_FLAGS='$(strip $(GLOBAL_OCAMLDEP_FLAGS))' \
	GLOBAL_OCAMLC_FLAGS='$(strip $(GLOBAL_OCAMLC_FLAGS))' \
	GLOBAL_LINK_FLAGS='$(strip $(GLOBAL_LINK_FLAGS))' \
	GLOBAL_OCAMLNAT_FLAGS='$(strip $(GLOBAL_OCAMLNAT_FLAGS))' \
	GLOBAL_LINKNAT_FLAGS='$(strip $(GLOBAL_LINKNAT_FLAGS))' \
	GLOBAL_OCAMLCPP_FLAGS='$(strip $(GLOBAL_OCAMLCPP_FLAGS))' \
	$(SUBDIR_MAKE_OPTIONS)

# lm-module-has-subdirs: Defined iff the module has sub-directories.
ifneq ($(strip $(SUBDIRS)),)
lm-module-has-subdirs=yes
endif

# lm-module-sources: All library and program sources, with library
# sources first.
lm-module-sources=\
	$(foreach lib,$(LIBRARIES),$($(lib)_SOURCES)) \
	$(foreach prog,$(PROGRAMS),$($(prog)_SOURCES))

# lm-module-mlsources: All ml sources, with library sources first
lm-module-mlsources=$(foreach src,$(lm-module-sources),$(call mlfile,$(src)))

# lm-module-headers: All headers, with library headers first
lm-module-headers= $(foreach src,$(lm-module-sources),$(call header,$(src)))

# lm-module-interfaces: All headers, with library headers first
lm-module-interfaces=$(foreach source,$(lm-module-sources),$(call interface,$(source)))

ifdef lm-DEBUG-MAKEFILE
$(info lm-module-lib-sources = $(lm-module-lib-sources))
$(info lm-module-prog-sources = $(lm-module-prog-sources))
$(info lm-module-interfaces = $(lm-module-interfaces))
$(info lm-module-headers = $(lm-module-headers))
$(info lm-module-mlsources = $(lm-module-mlsources))
$(info lm-module-subdir-args = $(lm-module-subdir-args))
endif

###
# Instantiate the targets
#

##
# Instantiate targets for sub-directories.
$(foreach sub,$(SUBDIRS),\
$(eval $(call subdir-targets-template,$(sub))))

##
# Instantiate build targets for libraries.
$(foreach lib,$(LIBRARIES),\
$(eval $(call library-targets-template,$(lib))))

##
# Instantiate build targets for programs.
$(foreach prog,$(PROGRAMS),\
$(eval $(call program-targets-template,$(prog))))

##
# Instantiate build targets for the documentation.
$(foreach doc,$(DOCUMENTS), \
$(eval $(call doc-targets-template,$(doc))))


###
# Directories
#

####
# Headers
.PHONY: build-headers
build-headers: $(lm-module-interfaces)

####
# Packages
.PHONY: build-pkgs
build-pkgs: $(foreach pkg,$(PACKAGES),build-pkg-$(pkg) )

####
# Libraries
.PHONY: build-libs
build-libs: $(foreach lib,$(LIBRARIES),build-lib-$(lib) )

ifneq ($(strip CUSTOM_TARGET_install),yes)
.PHONY: install-libs
install-libs: $(foreach lib,$(LIBRARIES), install-lib-$(lib))
endif

####
# Programs
.PHONY: build-programs
build-programs: $(foreach prog,$(PROGRAMS),build-program-$(prog) )

ifneq ($(strip CUSTOM_TARGET_install),yes)
.PHONY: install-programs
install-programs: $(foreach prog,$(PROGRAMS), install-program-$(prog))
endif

ifdef lm-DEBUG-MAKEFILE
$(info LIBRARIES = $(LIBRARIES))
$(info PROGRAMS = $(PROGRAMS))
$(info PACKING = $(PACKING))
$(info PACKED = $(PACKED))
endif

####
# Documentation

.PHONY: build-doc build-info build-html

ifeq '$(strip $(ENABLE_BUILD_DOCS))' 'false'
build-doc:
build-info:
build-html:
else
build-doc: $(foreach doc,$(DOCUMENTS), build-doc-$(doc))
	@echo "Built docs."
build-info: $(foreach doc,$(DOCUMENTS), build-doc-$(doc)-info)
	@echo "Built info docs."
build-html: $(foreach doc,$(DOCUMENTS), build-doc-$(doc)-html)
	@echo "Built html docs."
endif

.PHONY: install-doc install-info install-html
ifeq '$(strip $(ENABLE_BUILD_DOC))' 'false'
install-doc:
install-info:
install-html:
else
install-doc: $(foreach doc,$(DOCUMENTS), install-doc-$(doc))
	@echo "Installed docs."
install-info: $(foreach doc,$(DOCUMENTS), install-doc-$(doc)-info)
	@echo "Installed info docs."
install-html: $(foreach doc,$(DOCUMENTS), install-doc-$(doc)-html)
	@echo "Installed html docs."
endif

###
# Clean up
###

.PHONY: clean-subdirs
clean-subdirs:
	$(foreach subdir, $(SUBDIRS), $(MAKE) -C $(subdir) clean; )

.PHONY: clean-dir
clean-dir: $(foreach lib,$(LIBRARIES),clean-lib-$(lib) )  \
	$(foreach pkg,$(PACKAGES),clean-pkg-$(pkg) ) \
	$(foreach group,$(PACKING),clean-packing-$(group) ) \
	$(foreach lib,$(PACKED),clean-packed-$(lib) ) \
	$(foreach prog,$(PROGRAMS),clean-program-$(prog) ) \
	$(foreach doc,$(DOCUMENTS),clean-doc-$(doc) )
	$(EXTRA_CLEAN)


.PHONY: clean-doc
clean-doc: $(foreach doc,$(DOCUMENTS), clean-doc-$(doc))
.PHONY: clean-info
clean-info: $(foreach doc,$(DOCUMENTS), clean-$(doc)-info)
.PHONY: clean-html
clean-html: $(foreach doc,$(DOCUMENTS), clean-$(doc)-html)

.PHONY: libclean-subdirs
libclean-subdirs:
	$(foreach subdir, $(SUBDIRS), $(MAKE) -C $(subdir) libclean; )

.PHONY: libclean-dir
libclean-dir: clean-dir
	-$(RM) *.cmi *.cma *.cmxa *~
	$(EXTRA_LIBCLEAN)

libclean: libclean-subdirs libclean-dir

.PHONY: distclean-subdirs
distclean-subdirs:
	$(foreach subdir, $(SUBDIRS), $(MAKE) -C $(subdir) libclean; )

.PHONY: distclean-dir
distclean-dir: libclean-dir
	-$(RM) depend
	$(EXTRA_DISTCLEAN)

###
# Toplevel targets

ifneq ($(strip CUSTOM_TARGET_build),yes)
.PHONY: build
build: build-subdirs build-libs build-programs $(lm-doc-build-target)
endif

ifneq ($(strip CUSTOM_TARGET_install),yes)
.PHONY: install
install: build install-subdirs install-libs install-programs \
	$(lm-doc-install-target)
endif

.PHONY: clean
clean: clean-subdirs clean-dir

.PHONY: distclean
distclean: distclean-subdirs distclean-dir

##
# Run the sub-directories.

.PHONY: depend-subdirs
lm-subdir-depend-target=$(foreach sub,$(SUBDIRS), depend-subdir-$(sub))
depend-subdirs: $(lm-subdir-depend-target)

.PHONY: build-subdirs
lm-subdir-build-target=$(foreach sub,$(SUBDIRS), build-subdir-$(sub))
build-subdirs: $(lm-subdir-build-target)

.PHONY: install-subdirs
lm-subdir-install-target=$(foreach sub,$(SUBDIRS), install-subdir-$(sub))
install-subdirs: $(lm-subdir-install-target)

.PHONY: clean-subdirs
lm-subdir-clean-target=$(foreach sub,$(SUBDIRS), clean-subdir-$(sub))
clean-subdirs: $(lm-subdir-clean-target)

.PHONY: libclean-subdirs
lm-subdir-libclean-target=$(foreach sub,$(SUBDIRS), libclean-subdir-$(sub))
libclean-subdirs: $(lm-subdir-libclean-target)

.PHONY: distclean-subdirs
lm-subdir-distclean-target=$(foreach sub,$(SUBDIRS), distclean-subdir-$(sub))
distclean-subdirs: $(lm-subdir-distclean-target)

###
# Dependencies
# Define NODEPEND to not use depend.
#

ifneq ($(strip $(lm-module-headers) $(lm-module-mlsources)),)
ifndef NODEPEND
depend: $(lm-module-mlsources)
	-$(OCAMLDEP) $(lm-module-ocamldep-options) \
		*.mli  $(lm-module-mlsources) > depend
include depend
endif # NODEPEND
endif


####
# Variables that should not be exported.
unexport lm-module-has-subdirs
