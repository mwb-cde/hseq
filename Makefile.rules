###################################################### --*- Makefile -*--
# Makefile.rules - Common make rules for building HSeq modules
# Copyright 12 March, 2011, Matthew Wahab <mwb.cde@gmail.com>
#
# Released under the Lesser GPLv3 license:
# ========================================
# This file is part of HSeq.
#
# HSeq is free software; you can redistribute it and/or modify it
# under the terms of the Lesser GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# HSeq is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the Lesser GNU General Public
# License for more details.
#
# You should have received a copy of the Lesser GNU General Public
# License along with HSeq.  If not see <http://www.gnu.org/licenses/>.
######################################################################

#####
# Definitions and rules for Makefiles that build modules.
#
# This Makefile provides the necessary infrastructure for building modules
# and should be included from instances of Makefile.module.
#
# Requires:
# PROJ_ROOT: Variable containing relative path to top of the source tree.
#
# Provides:
# SRC_ROOT: Absolute path to root of the source tree.
#####

###
# Default target
###
.PHONY: all
all: build

###
# Include the common settings.
#

# PROJ_ROOT: Relative path to the top of the source tree is required.
ifndef PROJ_ROOT
$(error Error: variable PROJ_ROOT not set when using Makefile in directory $(CURDIR))
endif

include $(PROJ_ROOT)/Makefile.common

####
# Compiler settings
####

#
# Flags:
#   FAST: Use the fast compilers
#
# Options:
#   OCAMLC_FLAGS: options for ocamlc
#   OCAMLNAT_FLAGS: options for ocamlopt (native code compiler)
#   LINK_FLAGS: options for ocamlc (linker)
#   OCAMLNATLINK_FLAGS: options for ocamlnat (linker)
#   OCAMLDEP_FLAGS: options for ocamldep
#   OCAMLDOC_FLAGS: options for ocamldoc
#   OCAMLPP_FLAGS : options to pass to camlp4
#

## Tool and option selection 

# Use the camlp4 version to select the correct 
# prepropcessor options.
ifeq ($(OLDCAMLP4),true)
PPOPTIONS ?= -pp "camlp4o q_MLast.cmo pa_extend.cmo" -I +camlp4 
else
PPOPTIONS ?= -pp camlp4of -I +camlp4
endif

# BAREOCAMLC: The bare OCaml bytecode compiler
export BAREOCAMLC=ocamlc

# BAREOCAMLNAT: The bare OCaml native-code compiler
export BAREOCAMLNAT=ocamlopt

# OCAMLC: The OCaml byte code compiler
export OCAMLC=$(BAREOCAMLC) $(OCAMLC_FLAGS) $(lm-file-ocamlc-options)

# OCAMLLINK: The OCaml byte-code linker
export OCAMLLINK=$(BAREOCAMLC) -a $(lm-file-link-options)

# OCAMLNAT: The OCaml native code compiler
export OCAMLNAT=$(BAREOCAMLNAT) $(OCAMLNAT_FLAGS) 

# OCAMLNATLINK: The OCaml native-code linker
export OCAMLNATLINK=$(BAREOCAMLNAT) -a $(lm-file-link-options)

# OCAMLMKTOP: Make a toplevel
export OCAMLMKTOP=ocamlmktop $(OCAMLMKTOP_FLAGS)

# OCAMLDEP: The OCaml dependency generator
export OCAMLDEP=ocamldep $(OCAMLDEP_FLAGS) $(lm-file-ocamldep-options)

# OCAMLCPP : the preprocesor
export OCAMLCPP=camlp4 pa_o.cmo pr_o.cmo pa_extend.cmo pa_macro.cmo \
	$(OCAMLCPP_FLAGS) $(lm-file-ocamlcpp-options)

# OCAMLDOC: The documentation generator
export OCAMLDOC=ocamldoc $(OCAMLDOC_FLAGS)

###
# Native code compilers, only if supported
#
ifeq '$(FAST)' 'true'

# # BAREOCAMLC: The bare OCaml bytecode compiler
# export BAREOCAMLC=ocamlc.opt 

# # BAREOCAMLNAT: The bare OCaml native-code compiler
# export BAREOCAMLNAT=ocamlopt.opt

# # OCAMLC: The OCaml bytecode compiler
# export OCAMLC=$(BAREOCAMLC) $(OCAMLC_FLAGS) $(lm-file-ocamlc-options)

# # OCAMLNAT: The OCaml native code compiler
# export OCAMLNAT=$(BAREOCAML) $(OCAMLNAT_FLAGS) 

# # OCAMLNATLINK: The OCaml native-code linker
# export OCAMLNATLINK=$(OCAMLNAT) -a 

# # OCAMLDEP: The OCaml dependency generator
# export OCAMLDEP=ocamldep.opt $(OCAMLDEP_FLAGS)

# # OCAMLDOC: The documentation generator
# export OCAMLDOC=ocamldoc.opt $(OCAMLDOC_FLAGS)

endif # End of native code compilers
###


#####
# Build rules
#####

####
# Utility functions
####

# mlfile: Add ML source suffix to a name
export mlfile=$(addsuffix .ml,$(1))

# header: Add ML header suffix to a name
export header=$(addsuffix .mli,$(1))

# interface: Add ML object interface suffix to a nanme
export interface=$(addsuffix .cmi,$(1))

# bytecode: Add ML object file suffix to a name
export bytecode=$(addsuffix .cmo,$(1))

# natcode: Add ML native-code file suffix to a name
export natcode=$(addsuffix .cmx,$(1))

# objcode: Add system object-code suffix to a name
export objcode=$(addsuffix .o,$(1))

# bytelib: Add byte-lib suffix to a name
export bytelib=$(addsuffix .cma,$(1))

# natlib: Add native-lib suffix to a name
export natlib=$(addsuffix .cmxa,$(1))

# objlib: Add object-lib suffix to a name
export objlib=$(addsuffix .a,$(1))

##
# Suffixes and their build rules.
##

.SUFFIXES: .mli .cmi
.SUFFIXES: .ml .cmo
.SUFFIXES: .cma 
.SUFFIXES: .cmx 
.SUFFIXES: .cmxa 
.SUFFIXES: .mlp

%.ml: %.mlp
	$(OCAMLCPP) -impl $< -o $@

%.cmi: %.mli
	$(OCAMLC) -c $<

%.cmo: %.ml
	$(OCAMLC) -c $<

%.cmx: %.ml
	$(OCAMLNAT) -c $<


####
# Templates for building module objects
####

###
# Values that are passed in.
$(info Directory $(CURDIR))
$(info GLOBAL_OCAMLPP_FLAGS = $(GLOBAL_OCAMLPP_FLAGS))
$(info GLOBAL_OCAMLDEP_FLAGS = $(GLOBAL_OCAMLDEP_FLAGS))
$(info GLOBAL_OCAMLC_FLAGS = $(GLOBAL_OCAMLC_FLAGS))
$(info GLOBAL_LINK_FLAGS = $(GLOBAL_LINK_FLAGS))
$(info GLOBAL_OCAMLCPP_FLAGS = $(GLOBAL_OCAMLCPP_FLAGS))

###
# Values

# lm-lib-dirname: Library directory name
lm-lib-dirname=lib

# lm-header-dirname: Library directory name
lm-header-dirname=lib

# lm-bin-dirname: Binary directory name
lm-bin-dirname=bin

# lm-doc-dirname: Document directory name
lm-doc-dirname=doc

# lm-pack-filename: Prefix for file storing list of objects to be
# packed into a module using 'ocaml -pack'.
lm-pack-filename:=PACKLIST_

# lm-pack-bytecode-variable: Prefix for variable storing list of bytecode
# objects to be packed into a module using 'ocaml -pack'.
#lm-pack-bytecode-variable:=PACKLIST_
lm-pack-bytecode-variable:=

####
# Targets:
# --------
#
# all: synonymous with build.
# build: Build the module. (required)
# install: Install the module. (required)
# doc: Generate documentation.
# clean: Delete all built objects.
# libclean: Delete libraries only.
# distclean: Pristine clean.
# depend: Calculate dependencies
#
#
# Build order:
#
# 1) Run the preprocessor on .mlp files.
#
# 2) Build interface from .mli files.
#
#    This has to be done before building object files otherwise ocaml
#    will generate an interface for each .ml file as it is compile,
#    possibly exposing values that were meant to be internal to the
#    .ml file.
#
# 3) Build objects from .ml files.
#
# 4) Build libraries from .ml files.
#
# Notes:
#
# Native code compilation should use the -dllpath option to ocamlc to
# pass the library install-directory. This is needed so that the
# libraries can be found after installation.
#

########
# subdir-targets-template($1): Targets for sub-directory $(1).
define subdir-targets-template

.PHONY: all-subdir-$(1)
all-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) all

.PHONY: depend-subdir-$(1)
depend-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) depend

.PHONY: build-subdir-$(1)
build-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) build

.PHONY: install-subdir-$(1)
install-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) install

.PHONY: clean-subdir-$(1)
clean-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) clean

.PHONY: libclean-subdir-$(1)
libclean-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) libclean

.PHONY: distclean-subdir-$(1)
distclean-subdir-$(1):
	$$(MAKE) -C $(1) $$(lm-module-subdir-args) distclean
endef
########

########
# make-dir-template($1): Make a directory named $(1)
define make-dir-template
$(1):
	$$(MKDIR) $(1)
endef
########

########
# build-header-template($1): Build headers for $(1) from names in $(1)_SOURCES
define build-header-template

# Calculate the headers
ifneq ($$(origin $(1)_HEADERS),undefined)
lm-$(1)-headers=$$($(1)_HEADERS)
else
lm-$(1)-headers=$$(($1)_SOURCES)
endif

.PHONY: build-headers-$(1)
build-headers-$(1): $$(call interface,$$(lm-$(1)-headers))
endef
########

########
# build-bytecode-template($1): Build byte-code objects for $(1) from
# names in $(1)_SOURCES
define build-bytecode-template
.PHONY: build-bytecode-$(1)
build-bytecode-$(1): $$(call bytecode,$(1)_SOURCES)
endef
########

########
# build-bytelib-template($1): Build byte-code library for $(1) from
# names in $(1)_SOURCES
define build-bytelib-template

# Bytecode libraries
ifneq ($$(origin $(1)_HEADERS),undefined)
bytelib-$(1)-headers=$$($(1)_HEADERS)
else
bytelib-$(1)-headers=$$($(1)_SOURCES)
endif

bytelib-$(1)-interfaces:=$$(foreach src,$$(bytelib-$(1)-headers),\
				$$(call interface,$$(src)))
bytelib-$(1)-objects:=$$(foreach src,$$($(1)_SOURCES),$$(call bytecode,$$(src)))
bytelib-$(1)-libs:=\
	$$(foreach obj,$$($(1)_LIBS),$$(call bytelib,$$(obj))) \
	$$($(1)_BYTELIBS)
bytelib-$(1)-natlibs:=\
	$$(foreach obj,$$($(1)_LIBS),$$(call natlib,$$(obj))) \
	$$($(1)_NATLIBS)
bytelib-$(1)-libname:=$(call bytelib,$(1))

$$(info bytelib-$(1)-libname = $$(bytelib-$(1)-libname))
$$(info bytelib-$(1)-interfaces = $$(bytelib-$(1)-interfaces))
$$(info bytelib-$(1)-objects = $$(bytelib-$(1)-objects))
$$(info bytelib-$(1)-libs = $$(bytelib-$(1)-libs))

$$(info $(1)_LIBS = $$($(1)_LIBS))
$$(info $(1)_BYTELIBS = $$($(1)_BYTELIBS))
$$(info $(1)_NATLIBS = $$($(1)_NATLIBS))

lm-file-ocamlc-options:=$$(lm-module-ocamlc-options) $$($(1)_OCAMLC_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-file-ocamlc-options = $$(lm-file-ocamlc-options))

lm-file-link-options:=$$(lm-module-link-options) \
	$$($(1)_LINK_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-file-link-options = $$(lm-file-link-options))

lm-file-ocamldep-options:=$$(lm-module-ocamldep-options)
$$(info lm-file-ocamldep-options = $$(lm-file-ocamldep-options))

lm-file-ocamlcpp-options:=$$(lm-module-ocamlcpp-options)
$$(info lm-file-ocamlcpp-options = $$(lm-file-ocamlcpp-options))

# Build rule for the library.
bytelib-$(1)-target:=$$(bytelib-$(1)-libname)
$$(info bytelib-$(1)-target = $$(bytelib-$(1)-target))
$$(info bytelib-$(1)-libs = $$(bytelib-$(1)-libs))
$$(info bytelib-$(1)-objects = $$(bytelib-$(1)-objects))

ifneq ($$(strip $$($(1)_CUSTOM_BUILD)),yes)
$$(bytelib-$(1)-libname): $$(bytelib-$(1)-objects)
	$$(info Linking $(bytelib-$(1)-libname))
	$$(OCAMLLINK) -o $$(bytelib-$(1)-libname) \
		$$(bytelib-$(1)-libs) $$(bytelib-$(1)-objects) 
endif

# Build rule to call
.PHONY: build-bytelib-$(1)
build-bytelib-$(1): $$(bytelib-$(1)-interfaces) $$(bytelib-$(1)-target)
endef
########

########
# library-targets-template($1): Targets for library $(1).
define library-targets-template

$$(info Build variables for library $(1))
$$(info $(1)_SOURCES=$$($(1)_SOURCES))
$$(info $(1)_HEADERS=$$($(1)_HEADERS))
$$(info $(1)_LIBS=$$($(1)_LIBS))
$$(info $(1)_BYTELIBS=$$($(1)_BYTELIBS))
$$(info $(1)_NATLIBS=$$($(1)_NATLIBS))

# Bytecode libraries
ifneq ($$(origin $(1)_HEADERS),undefined)
lm-lib-$(1)-headers=$$($(1)_HEADERS)
else
lm-lib-$(1)-headers=$$($(1)_SOURCES)
endif
$$(info lm-lib-$(1)-headers=$$(lm-lib-$(1)-headers))

lm-lib-$(1)-mlheaders:=$$(foreach src,$$(lm-lib-$(1)-headers),\
				$$(call header,$$(src)))
lm-lib-$(1)-interfaces:=\
	$$(foreach src,$$(lm-lib-$(1)-headers),$$(call interface,$$(src)))
$$(info lm-lib-$(1)-interfaces=$$(lm-lib-$(1)-interfaces))

lm-lib-$(1)-objects:=\
	$$(foreach src,$$($(1)_SOURCES),$$(call bytecode,$$(src)))
$$(info lm-lib-$(1)-objects=$$(lm-lib-$(1)-objects))

lm-lib-$(1)-libs:=\
	$$(foreach obj,$$($(1)_LIBS),$$(call bytelib,$$(obj))) \
	$$($(1)_BYTELIBS)
$$(info lm-lib-$(1)-libs=$$(lm-lib-$(1)-libs))

lm-lib-$(1)-natlibs:=\
	$$(foreach obj,$$($(1)_LIBS),$$(call natlib,$$(obj))) \
	$$($(1)_NATLIBS)
$$(info lm-lib-$(1)-natlibs=$$(lm-lib-$(1)-natlibs))

lm-lib-$(1)-libname:=$(call bytelib,$(1))
$$(info lm-lib-$(1)-libname=$$(lm-lib-$(1)-libname))

lm-lib-$(1)-ocamlc-options:=$$(lm-module-ocamlc-options) $$($(1)_OCAMLC_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-lib-$(1)-ocamlc-options=$$(lm-lib-$(1)-ocamlc-options))

lm-lib-$(1)-link-options:=$$(lm-module-link-options) \
	$$($(1)_LINK_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-lib-$(1)-link-options=$$(lm-lib-$(1)-link-options))

lm-lib-$(1)-ocamldep-options:=$$(lm-module-ocamldep-options)
$$(info lm-lib-$(1)-ocamldep-options=$$(lm-lib-$(1)-ocamldep-options))

lm-lib-$(1)-ocamlcpp-options:=$$(lm-module-ocamlcpp-options)
$$(info lm-lib-$(1)-ocamlcpp-options=$$(lm-lib-$(1)-ocamlcpp-options))

###
# Preprocessor rules
#$$(addsuffix .ml,$$($(1)_SOURCES)): $$(addsuffix .mlp,$$($(1)_SOURCES))
#	$(OCAMLCPP) $$(lm-lib-$(1)-ocamlcpp-optins) -impl $$< -o $$@

###
# Bytecode rules

# Interfaces
$$(addsuffix .cmi,$$(lm-lib-$(1)-headers)): %.cmi: %.mli
	$(OCAMLC) $$(lm-lib-$(1)-ocamlc-options) -c $$<

# Bytecode object files
$$(info Bytecode object files: $$(addsuffix .cmo,$$($(1)_SOURCES)))
$$(addsuffix .cmo,$$($(1)_SOURCES)): %.cmo: %.ml
	$(OCAMLC) $$(lm-lib-$(1)-ocamlc-options) -c $$<

# Bytecode library.
ifneq ($$(strip $$($(1)_CUSTOM_BUILD)),yes)
$$(lm-lib-$(1)-libname): $$(addsuffix .cmo,$$($(1)_SOURCES))
	$$(info Linking $(lm-lib-$(1)-libname))
	$$(OCAMLLINK) $$(lm-lib-$(1)-link-options) \
		-o $$(lm-lib-$(1)-libname) \
		$$(lm-lib-$(1)-libs) $$(lm-lib-$(1)-objects) 
endif

# Bytecode library in staging directory.
.PHONY: install-objdir-lib-$(1)

ifeq ($$(strip $$(lm-module-uses-objdir)), yes)
$$(lm-module-lib-dir)/$$(lm-lib-$(1)-libname): $$(lm-lib-$(1)-libname) \
						$$(lm-module-lib-dir)
	$$(COPY) $$(lm-lib-$(1)-interfaces) $$(lm-module-lib-dir)
	$$(COPY) $$(lm-lib-$(1)-mlheaders) $$(lm-module-lib-dir)
	$$(COPY) $$(lm-lib-$(1)-libname) $$(lm-module-lib-dir)

install-objdir-lib-$(1): $$(lm-module-lib-dir) $$(lm-lib-$(1)-libname) \
		$$(lm-lib-$(1)-interfaces)
	$$(COPY) $$(lm-lib-$(1)-interfaces) $$(lm-module-lib-dir)
	$$(COPY) $$(lm-lib-$(1)-mlheaders) $$(lm-module-lib-dir)
	$$(COPY) $$(lm-lib-$(1)-libname) $$(lm-module-lib-dir)
else
install-objdir-lib-$(1):

endif

###
# Toplevel rules

# build
lm-lib-$(1)-target:=$$(lm-lib-$(1)-libname)
$$(info lm-lib-$(1)-target=$$(lm-lib-$(1)-target))

.PHONY: build-lib-$(1)
build-lib-$(1): $$(lm-lib-$(1)-interfaces) $$(lm-lib-$(1)-target)

.PHONY: build-bytelib-$(1)
build-bytelib-$(1): build-lib-$(1)

# clean
.PHONY: clean-lib-$(1)
clean-lib-$(1):
	$$(RM) $$(lm-lib-$(1)-libname)
	$$(RM) $$(lm-lib-$(1)-interfaces) $$(lm-lib-objects)

# libclean
.PHONY: libclean-lib-$(1)
libclean-lib-$(1): clean-lib-$(1)
	$$(RM) $$(lm-lib-$(1)-interfaces) $$(lm-lib-objects) $$(lm-lib-$(1)-libname)

# distclean
.PHONY: build-lib-$(1)
distclean-lib-$(1): libclean-$(1)
	$$(RM) $$(lm-lib-$(1)-interfaces) $$(lm-lib-objects) $$(lm-lib-$(1)-libname)

endef
########

########
# build-packing-template($1): Build packing objects for $(1) from
# names in $(1)_SOURCES
define build-packing-template

# Bytecode libraries
ifneq ($$(origin $(1)_HEADERS),undefined)
packing-$(1)-headers=$$($(1)_HEADERS)
else
packing-$(1)-headers=$$($(1)_SOURCES)
endif

packing-$(1)-mlheaders:=$$(foreach src,$$(packing-$(1)-headers),\
				$$(call header,$$(src)))
packing-$(1)-interfaces:=$$(foreach src,$$(packing-$(1)-headers),\
				$$(call interface,$$(src)))
packing-$(1)-sources:=$$(foreach src,$$($(1)_SOURCES),$$(call mlcode,$$(src)))
packing-$(1)-objects:=$$(foreach src,$$($(1)_SOURCES),$$(call bytecode,$$(src)))
packing-$(1)-libs:=\
	$$(foreach obj,$$($(1)_LIBS),$$(call packing,$$(obj))) \
	$$($(1)_PACKING)
packing-$(1)-natlibs:=\
	$$(foreach obj,$$($(1)_LIBS),$$(call natlib,$$(obj))) \
	$$($(1)_NATLIBS)


ifneq ($$(strip $$($(1)_PACK_DIR)),)
packing-$(1)-fileprefix=$$($(1)_PACK_DIR)/

$$(eval $$(call make-dir-template,$$($(1)_PACK_DIR)))

else
packing-$(1)-fileprefix=
endif

# If the group name is not specified, it is the same as the
# subdirectory being built.
ifeq ($$(strip $$($(1)_PACK_GROUP)),)
packing-$(1)-group=$$(lastword $$(subst /, ,$$(CURDIR)))
else
packing-$(1)-group=$$($(1)_PACK_GROUP)
endif
$$(info Building packing group $$(packing-$(1)-group))

packing-$(1)-filelist:=\
$$(strip $$(packing-$(1)-fileprefix)$$(lm-pack-filename)$$(packing-$(1)-group))

# Packing

$$(info packing-$(1)-filelist = $$(packing-$(1)-filelist))
$$(info packing-$(1)-packname = $$(packing-$(1)-packname))
$$(info packing-$(1)-interfaces = $$(packing-$(1)-interfaces))
$$(info packing-$(1)-objects = $$(packing-$(1)-objects))
$$(info packing-$(1)-libs = $$(packing-$(1)-libs))

lm-file-ocamlc-options:=$$(lm-module-ocamlc-options) $$($(1)_OCAMLC_FLAGS) \
	$$(if $$(strip $$($(1)_PACK_DIR)),-I $$($(1)_PACK_DIR)) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-file-ocamlc-options = $$(lm-file-ocamlc-options))

lm-file-ocamlnat-options:=-pack-for $$(packing-$(1)-packname) \
	$$(lm-module-ocamlc-options) $$($(1)_OCAMLC_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-file-ocamlnat-options = $$(lm-file-ocamlnat-options))

lm-file-ocamldep-options:=$$(lm-module-ocamldep-options)
$$(info lm-file-ocamldep-options = $$(lm-file-ocamldep-options))

lm-file-ocamlcpp-options:=$$(lm-module-ocamlcpp-options)
$$(info lm-file-ocamlcpp-options = $$(lm-file-ocamlcpp-options))

# Build rule for the targets
$$(packing-$(1)-objects): $$(packing-$(1)-sources)

ifneq ($$(strip $$($(1)_PACK_DIR)),)
packing-$(1)-targets:=$$(foreach obj,$$(packing-$(1)-objects),\
	$$(packing-$(1)-fileprefix)$$(obj))

$$(packing-$(1)-targets): $$(packing-$(1)-objects) \
		$$(packing-$(1)-interfaces) $$($(1)_PACK_DIR)
	$$(COPY) $$(packing-$(1)-interfaces) $$($(1)_PACK_DIR)
	$$(COPY) $$(packing-$(1)-objects) $$($(1)_PACK_DIR)
else
packing-$(1)-targets:=$$(packing-$(1)-objects)
endif

$$(info packing-$(1)-targets = $$(packing-$(1)-targets))
$$(info packing-$(1)-libs = $$(packing-$(1)-libs))
$$(info packing-$(1)-sources = $$(packing-$(1)-sources))
$$(info packing-$(1)-objects = $$(packing-$(1)-objects))

# Build rule to generate the file list.
$$(packing-$(1)-filelist): $$(packing-$(1)-fileprefix)
	echo -n "$$(packing-$(1)-objects) "> $$(packing-$(1)-filelist)

# Build rule to call
$$(info target build-packing-$(1))
.PHONY: build-packing-$(1)
build-packing-$(1): $$(packing-$(1)-interfaces) $$(packing-$(1)-targets) \
			$$(packing-$(1)-filelist)
endef
########

########
# packing-targets-template($1): Targets for packing $(1).
# Requires $(1)_PACK_DIR to be defined.
define packing-targets-template

# Print variables
$$(info Packing group $(1) build variables)
$$(info $(1)_PACK_DIR=$$($(1)_PACK_DIR) (required))
$$(info $(1)_PACK_GROUP=$$($(1)_PACK_GROUP))
$$(info $(1)_SOURCES=$$($(1)_SOURCES))
$$(info $(1)_HEADERS=$$($(1)_HEADERS))
$$(info $(1)_LIBS=$$($(1)_LIBS))

# Packing directory is required.
ifneq ($$(strip $$($(1)_PACK_DIR)),)
lm-packing-$(1)-dirprefix=$$($(1)_PACK_DIR)/
else
$$(error Variable $(1)_PACK_DIR must be defined for packing group $(1).)
endif

# If the group name is not specified, it is the same as the
# subdirectory being built.
ifeq ($$(strip $$($(1)_PACK_GROUP)),)
lm-packing-$(1)-group=$$(lastword $$(subst /, ,$$(CURDIR)))
else
lm-packing-$(1)-group=$$($(1)_PACK_GROUP)
endif
$$(info Packing group name $$(lm-packing-$(1)-group))

# Bytecode libraries
ifneq ($$(origin $(1)_HEADERS),undefined)
lm-packing-$(1)-headers=$$($(1)_HEADERS)
else
lm-packing-$(1)-headers=$$($(1)_SOURCES)
endif
$$(info lm-packing-$(1)-headers=$$(lm-packing-$(1)-headers))


# Sources and libraries
lm-packing-$(1)-mlheaders:=\
	$$(foreach src,$$(lm-packing-$(1)-headers),$$(call header,$$(src)))
$$(info lm-packing-$(1)-mlheaders=$$(lm-packing-$(1)-mlheaders))

lm-packing-$(1)-interfaces:=\
	$$(foreach src,$$(lm-packing-$(1)-headers),$$(call interface,$$(src)))
$$(info lm-packing-$(1)-interfaces=$$(lm-packing-$(1)-interfaces))

lm-packing-$(1)-objects:=\
	$$(foreach src,$$($(1)_SOURCES),$$(call bytecode,$$(src)))
$$(info lm-packing-$(1)-objects=$$(lm-packing-$(1)-objects))

lm-packing-$(1)-libs:=\
	$$(foreach obj,$$($(1)_LIBS),$$(call bytelib,$$(obj))) \
	$$($(1)_BYTELIBS)
$$(info lm-packing-$(1)-libs=$$(lm-packing-$(1)-libs))

lm-packing-$(1)-natlibs:=\
	$$(foreach obj,$$($(1)_LIBS),$$(call natlib,$$(obj))) \
	$$($(1)_NATLIBS)
$$(info lm-packing-$(1)-natlibs=$$(lm-packing-$(1)-natlibs))

lm-packing-$(1)-libname:=$(call bytelib,$(1))
$$(info lm-packing-$(1)-libname=$$(lm-packing-$(1)-libname))

# The name of the file in which to store the packing group object list.
lm-packing-$(1)-filelist:=\
$$(strip $$(lm-packing-$(1)-dirprefix)$$(lm-pack-filename)$$(lm-packing-$(1)-group))
$$(info lm-packing-$(1)-filelist=$$(lm-packing-$(1)-filelist))

# Build options
lm-packing-$(1)-ocamlc-options:=$$(lm-module-ocamlc-options) $$($(1)_OCAMLC_FLAGS) \
	-I $$($(1)_PACK_DIR) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-packing-$(1)-ocamlc-options=$$(lm-packing-$(1)-ocamlc-options))

lm-packing-$(1)-link-options:=$$(lm-module-link-options) \
	$$($(1)_LINK_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-packing-$(1)-link-options=$$(lm-packing-$(1)-link-options))

lm-packing-$(1)-ocamldep-options:=$$(lm-module-ocamldep-options)
$$(info lm-packing-$(1)-ocamldep-options=$$(lm-packing-$(1)-ocamldep-options))

lm-packing-$(1)-ocamlcpp-options:=$$(lm-module-ocamlcpp-options)
$$(info lm-packing-$(1)-ocamlcpp-options=$$(lm-packing-$(1)-ocamlcpp-options))

###
# Preprocessor rules

###
# Bytecode rules

# Interfaces
$$(lm-packing-$(1)-interfaces): %.cmi: %.mli
	$(OCAMLC) $$(lm-packing-$(1)-ocamlc-options) -c $$<

# Bytecode object files
$$(lm-packing-$(1)-objects): %.cmo: %.ml
	$(OCAMLC) $$(lm-packing-$(1)-ocamlc-options) -c $$<

# Packing directory targets
lm-packing-$(1)-targets:=$$(foreach obj,$$(lm-packing-$(1)-objects),\
	$$(lm-packing-$(1)-dirprefix)$$(obj))
$$(info lm-packing-$(1)-targets = $$(lm-packing-$(1)-targets))

# Build rule to make the packing directory.
$$(eval $$(call make-dir-template,$$($(1)_PACK_DIR)))

# Build rule to generate the file list.
$$(lm-packing-$(1)-filelist): $$(lm-packing-$(1)-dirprefix)
	echo -n "$$(lm-packing-$(1)-objects) "> $$(lm-packing-$(1)-filelist)

$$(lm-packing-$(1)-targets): $$(lm-packing-$(1)-objects) \
		$$(lm-packing-$(1)-interfaces) $$($(1)_PACK_DIR)
	$$(COPY) $$(lm-packing-$(1)-mlheaders) $$($(1)_PACK_DIR)
	$$(COPY) $$(lm-packing-$(1)-interfaces) $$($(1)_PACK_DIR)
	$$(COPY) $$(lm-packing-$(1)-objects) $$($(1)_PACK_DIR)


# Bytecode library.
ifneq ($$(strip $$($(1)_CUSTOM_BUILD)),yes)
$$(lm-packing-$(1)-libname): $$(addsuffix .cmo,$$($(1)_SOURCES))
	$$(info Linking $(lm-packing-$(1)-libname))
	$$(OCAMLLINK) $$(lm-packing-$(1)-link-options) \
		-o $$(lm-packing-$(1)-libname) \
		$$(lm-packing-$(1)-libs) $$(lm-packing-$(1)-objects) 
endif

# Bytecode library in staging directory.
.PHONY: install-objdir-packing-$(1)

ifeq ($$(strip $$(lm-module-uses-objdir)), yes)
$$(lm-module-lib-dir)/$$(lm-packing-$(1)-libname): $$(lm-packing-$(1)-libname) \
						$$(lm-module-lib-dir)
	$$(COPY) $$(lm-packing-$(1)-interfaces) $$(lm-module-lib-dir)
	$$(COPY) $$(lm-packing-$(1)-mlheaders) $$(lm-module-lib-dir)
	$$(COPY) $$(lm-packing-$(1)-libname) $$(lm-module-packing-dir)

install-objdir-packing-$(1): $$(lm-module-lib-dir) $$(lm-packing-$(1)-libname) \
		$$(lm-packing-$(1)-interfaces)
	$$(COPY) $$(lm-packing-$(1)-interfaces) $$(lm-module-packing-dir)
	$$(COPY) $$(lm-packing-$(1)-mlheaders) $$(lm-module-lib-dir)
	$$(COPY) $$(lm-packing-$(1)-packingname) $$(lm-module-lib-dir)
else
install-objdir-packing-$(1):

endif

###
# Toplevel rules

# build
.PHONY: build-packing-$(1)
build-packing-$(1): $$(lm-packing-$(1)-interfaces) \
			$$(lm-packing-$(1)-targets) \
			$$(lm-packing-$(1)-filelist)


# clean
.PHONY: clean-packing-$(1)
clean-packing-$(1):
	$$(RM) $$(lm-packing-$(1)-interfaces) $$(lm-packing-objects)
	-$$(RM) $$(foreach file,$$(lm-packing-$(1)-interfaces),\
			$$(lm-packing-$(1)-dirprefix)/$$(file))
	-$$(RM) $$(foreach file,$$(lm-packing-$(1)-mlheaders),\
			$$(lm-packing-$(1)-dirprefix)/$$(file))
	-$$(RM) $$(lm-packing-$(1)-targets) $$(lm-packing-$(1)-filelist)
	-$$(RMDIR) --ignore-fail $$($(1)_PACK_DIR)

# libclean
.PHONY: packingclean-packing-$(1)
libclean-packing-$(1): clean-packing-$(1)

# distclean
.PHONY: dist-packing-$(1)
distclean-packing-$(1): libclean-$(1)


endef
########

########
# include-pack-filelist-template: Generate an include directive for file $(1).
define include-file-template
$$(info Including $(1))
include $(1)
endef
########

########
# include-packing-filelist-template: Generate an include directive and
# build-rule for the packing file for group $(2) in marshalling
# directory $(1).
define include-packing-file-template
$$(info Adding build rule for '$(1)$$(lm-pack-filename)$(2)')
$(1)$$(lm-pack-filename)$(2): 
	$(MAKE) -C $(2) $$(lm-module-subdir-args) build-packing-$(2)
endef
########

########
# read-file-template: Set variable $(1) to the contents of file $(2).
define read-file-template
$$(info Setting $(1) to contents of file $(2))
$$(info Set $(1)=$(2))
endef
########

########
# build-packed-template($1): Build packed library $(1).
define build-packed-template

# The packing groups and marshalling directory.
ifneq ($$(strip $$($(1)_PACK_DIR)),)
packed-$(1)-packdir:=$$($(1)_PACK_DIR)/
else
packed-$(1)-packdir:=./
endif
packed-$(1)-groups:=$$($(1)_GROUPS)

$$(info packed-$(1)-packdir=$$(packed-$(1)-packdir))
$$(info packed-$(1)-groups=$$(packed-$(1)-groups))

packed-$(1)-packlist:=\
$$(foreach group,$$(packed-$(1)-groups),$$(lm-pack-filename)$$(group) )

$$(info packed-$(1)-packlist=$$(packed-$(1)-packlist))

packed-$(1)-packfiles=\
$$(foreach f,$$(packed-$(1)-packlist),$$(packed-$(1)-packdir)$$(f))

$$(info packed-$(1)-packfiles=$$(packed-$(1)-packfiles))

# Get the list of files, in group order.
$$(foreach group,$$($(1)_GROUPS),\
$$(eval $$(call include-packing-file-template,$$(packed-$(1)-packdir),$$(group))))

# The files to be generated
packed-$(1)-bytelib:=$$(call bytelib,$(1))
packed-$(1)-interface:=$$(call interface,$$($(1)_PACK_NAME))
packed-$(1)-module:=$$(call bytecode,$$($(1)_PACK_NAME))

# Build rule for the module
$$(packed-$(1)-packdir)/$$(packed-$(1)-module) \
$$(packed-$(1)-packdir)/$$(packed-$(1)-interface): $$(packed-$(1)-packfiles)
	@( $(CD) $$(packed-$(1)-packdir) ; \
	cat $$(packed-$(1)-packlist) > $(1)_FULL_PACK_LIST ; \
	echo "Linking packed module $(1) with files $$$$(cat $(1)_FULL_PACK_LIST)" ; \
	$$(OCAMLC) -pack -o $$(packed-$(1)-module) $$$$(cat $(1)_FULL_PACK_LIST) )

$$(packed-$(1)-module): $$(packed-$(1)-packdir)/$$(packed-$(1)-module)
	$$(COPY) $$(packed-$(1)-packdir)/$$(packed-$(1)-module) $$(packed-$(1)-module)

$$(packed-$(1)-interface): $$(packed-$(1)-packdir)/$$(packed-$(1)-interface)
	$$(COPY) $$(packed-$(1)-packdir)/$$(packed-$(1)-interface) $$(packed-$(1)-interface)

# Build rule for the packed library
ifneq ($$(strip $$($(1)_CUSTOM_BUILD)),yes)
$$(packed-$(1)-bytelib): $$(packed-$(1)-interface) $$(packed-$(1)-module)
	$$(OCAMLC) -a -o $$(packed-$(1)-bytelib) $$(packed-$(1)-module)
endif

# Build rule to call
packed-$(1)-target:=$$(packed-$(1)-bytelib) $$(packed-$(1)-interface)
.PHONY: build-packed-$(1)
build-packed-$(1): $$(packed-$(1)-target)
endef
########

########
# install-module-template($1,$2):Install module files to directory
# $(2) with build target $(1).
define install-module-template

# List of required directories
lm-module-lib-dir:=$(2)/$$(lm-lib-dirname)
lm-module-bin-dir:=$(2)/$$(lm-bin-dirname)
lm-module-code-dir:=$(2)/$$(lm-code-dirname)
lm-module-data-dir:=$(2)/$$(lm-data-dirname)
lm-module-doc-dir:=$(2)/$$(lm-doc-dirname)

# List of libraries to install, use module definitions when given.
ifneq ($$(origin INSTALL_LIBRARIES),undefined)
lm-module-install-libs:=$$(strip $$(INSTALL_LIBRARIES))
else
lm-module-install-libs=$$(LIBRARIES)
endif # INSTALL_LIBRARIES

# List of headers to install, use module definitions when given.
ifneq ($$(origin INSTALL_HEADERS),undefined)
lm-module-install-headers:=$$(strip $$(INSTALL_HEADERS))
else
lm-module-install-headers:=\
$$(foreach lib,$$(lm-module-install-libs),\
	$$(if $$(findstring undefined,$$(origin $$(lib)_HEADERS)),\
		$$(foreach src,$$($$(lib)_SOURCES),\
			$$(call interface,$$(src)) $$(call header,$$(src))),\
		$$(foreach src,$$($$(lib)_HEADERS),\
			$$(call interface,$$(src)) $$(call header,$$(src)))))

endif # INSTALL_LIBRARIES

# List of packings to install.
lm-module-install-packed:=\
$$(foreach lib,$$(PACKED), \
	$$(call bytelib,$$(lib)) $$(call interface,$$($$(lib)_PACK_NAME)))

# Calculate library files to install
lm-module-install-libfiles:=\
	$$(foreach lib,$$(lm-module-install-libs), $$(call bytelib,$$(lib))) \
	$$(lm-module-install-headers) \
	$$(lm-module-install-packed) \
	$$(INSTALL_EXTRA_LIBRARIES)

# List of binariess to install, use module definitions when given.
ifdef INSTALL_PROGRAMS
lm-module-install-bins=$$(strip $$(INSTALL_PROGRAMS))
else
lm-module-install-bins=$$(PROGRAMS)
endif # INSTALL_PROGRAMS

# Calculate binary files to install
lm-module-install-binfiles:=$$(lm-module-install-bins) $$(INSTALL_EXTRA_PROGRAMS)

# Calculate code files to install
lm-module-install-codefiles:=$$(lm-module-install-code)

# Make sure that required directories exist.
ifneq ($$(strip $$(MODULE_INSTALL_PATH)),)
lm-module-lib-dir:=$(2)/$$(lm-lib-dirname)/$$(MODULE_INSTALL_PATH)
lm-module-bin-dir:=$(2)/$$(lm-bin-dirname)/$$(MODULE_INSTALL_PATH)
lm-module-code-dir:=$(2)/$$(lm-code-dirname)/$$(MODULE_INSTALL_PATH)
lm-module-data-dir:=$(2)/$$(lm-data-dirname)/$$(MODULE_INSTALL_PATH)
lm-module-doc-dir:=$(2)/$$(lm-doc-dirname)/$$(MODULE_INSTALL_PATH)

# Has a distinct installation path
ifneq ($$(strip $$(lm-module-install-libfiles)),)
$$(eval $$(call make-dir-template,$$(lm-module-lib-dir)))
endif
ifneq ($$(strip $$(lm-module-install-binfiles)),)
$$(eval $$(call make-dir-template,$$(lm-module-bin-dir)))
endif
ifneq ($$(strip $$(lm-module-install-codefiles)),)
$$(eval $$(call make-dir-template,$$(lm-module-code-dir)))
endif
ifneq ($$(strip $$(lm-module-install-datafiles)),)
$$(eval $$(call make-dir-template,$$(lm-module-data-dir)))
endif
ifneq ($$(strip $$(lm-module-install-docfiles)),)
$$(eval $$(call make-dir-template,$$(lm-module-doc-dir)))
endif
endif # MODULE_INSTALL_PATH

# Select targets
ifneq ($$(strip $$(lm-module-install-libfiles)),)
lm-module-install-$(1)-target:=$$(lm-module-install-$(1)-target) \
	lm-$(1)-module-install-lib
endif

ifneq ($$(strip $$(lm-module-install-binfiles)),)
lm-module-install-$(1)-target:=$$(lm-module-install-$(1)-target) \
	lm-$(1)-module-install-bin
endif

ifneq ($$(strip $$(lm-module-install-codefiles)),)
lm-module-install-$(1)-target:=$$(lm-module-install-$(1)-target) \
	lm-$(1)-module-install-code
endif

ifneq ($$(strip $$(lm-module-install-datafiles)),)
lm-module-install-$(1)-target:=$$(lm-module-install-$(1)-target) \
	lm-$(1)-module-install-data
endif
ifneq ($$(strip $$(lm-module-install-docfiles)),)
lm-module-install-$(1)-target:=$$(lm-module-install-$(1)-target) \
	lm-$(1)-module-install-doc
endif

## Copying
$$(lm-module-lib-dir)/%: % $$(lm-module-lib-dir)
	$$(COPY) % $$(lm-module-lib-dir)

$$(lm-module-bin-dir)/%: % $$(lm-module-bin-dir)
	$$(COPY) % $$(lm-module-bin-dir)

# Install directories
.PHONY: lm-$(1)-module-install-lib
ifneq ($$(strip $$(lm-module-install-libfiles)),)
lm-$(1)-module-install-lib: $$(lm-module-lib-dir)
	$$(COPY) $$(lm-module-install-libfiles) $$(lm-module-lib-dir)
else
lm-$(1)-module-install-lib:

endif

.PHONY: lm-$(1)-module-install-bin
ifneq ($$(strip $$(lm-module-install-binfiles)),)
lm-$(1)-module-install-bin: $$(lm-module-bin-dir)
	$$(COPY) $$(lm-module-install-binfiles) $$(lm-module-bin-dir)
else
lm-$(1)-module-install-bin:
endif

.PHONY: lm-$(1)-module-install-code
ifneq ($$(strip $$(lm-module-install-codefiles)),)
lm-$(1)-module-install-code: $$(lm-module-code-dir)
	$$(COPY) $$(lm-module-install-codefiles) $$(lm-module-code-dir)
else
lm-$(1)-module-install-code:
endif

.PHONY: lm-$(1)-module-install-data
ifneq ($$(strip $$(lm-module-install-datafiles)),)
lm-$(1)-module-install-data: $$(lm-module-data-dir)
	$$(COPY) $$(lm-module-install-datafiles) $$(lm-module-data-dir)
else
lm-$(1)-module-install-data:
endif

.PHONY: lm-$(1)-module-install-doc
ifneq ($$(strip $$(lm-module-install-docfiles)),)
lm-$(1)-module-install-doc: $$(lm-module-doc-dir)
	$$(COPY) $$(lm-module-install-docfiles) $$(lm-module-doc-dir)
else
lm-$(1)-module-install-doc: 
endif

$$(info lm-module-install-$(1)-target = $$(lm-module-install-$(1)-target))
.PHONY: $(1)
module-install-$(1): $$(lm-module-install-$(1)-target) 
endef
########

########
# build-natcode-template($1): Build native-code objects for $(1) from
# names in $(1)_SOURCES.
define build-natcode-template
natlib_$(1)_objects=$$(foreach src,$$($(1)_SOURCES),$$(call natcode,$$(src)))
natlib_$(1)_libs=$$($(1)_NATLIBS) $$(foreach src,$$($(1)_SOURCES),$$(call natlib,$$(src)))
$(call natlib,$(1)): 
	$$(OCAMLNATLINK) $$(OCAMLNATLINK_FLAGS) -o $(call natlib, $1) \
		$$(natlib_$(1)_libs) $$(natlib_$(1)_objects)
.PHONY: build-natcode-$(1)
build-natcode-$(1): $(call natlib,$(1))
endef
########

########
# build-byteprog-template($1): Build byte-code program for $(1) from
# names in $(1)_SOURCES
define build-byteprog-template

ifneq ($$(origin $(1)_HEADERS),undefined)
byteprog-$(1)-headers=$$($(1)_HEADERS)
else
byteprog-$(1)-headers=$$($(1)_SOURCES)
endif

byteprog-$(1)-interfaces:=$$(foreach src,$$(byteprog-$(1)-headers),\
				$$(call interface,$$(src)))
byteprog-$(1)-objects:=$$(foreach src,$$($(1)_SOURCES),$$(call bytecode,$$(src)))

byteprog-$(1)-libs:=$$($(1)_LIBS)
$$(info byteprog-$(1)-libs=$$(byteprog-$(1)-libs))

lm-file-ocamlc-options:=$$(lm-module-ocamlc-options) $$($(1)_OCAMLC_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-file-ocamlc-options = $$(lm-file-ocamlc-options))

lm-file-link-options:=$$(lm-module-link-options) \
	$$($(1)_LINK_FLAGS) \
	$$(foreach dir,$$($(1)_INCLUDE),-I $$(dir))
$$(info lm-file-link-options = $$(lm-file-link-options))

lm-file-ocamldep-options:=$$(lm-module-ocamldep-options)
$$(info lm-file-ocamldep-options = $$(lm-file-ocamldep-options))

lm-file-ocamlcpp-options:=$$(lm-module-ocamlcpp-options)
$$(info lm-file-ocamlcpp-options = $$(lm-file-ocamlcpp-options))

ifneq ($$(strip $$($(1)_CUSTOM_BUILD)),yes)
$(1): $$(byteprog-$(1)-interfaces) $$(byteprog-$(1)-objects)
	$$(OCAMLC) $$($(1)_OCAMLC_FLAGS) -o $(1) $$($(1)_INCLUDE)\
		$$(byteprog-$(1)-libs) $$(byteprog-$(1)-objects)
endif

.PHONY: build-byteprog-$(1)
build-byteprog-$(1): $(1)

endef
########

######
# Use the templates to build everything in Makefile.module
#

###
# Module settings
# 

##
# If LOCAL_X_FLAGS is undefined, use the default.

ifndef LOCAL_OCAMLPP_FLAGS
LOCAL_OCAMLPP_FLAGS:=$(GLOBAL_OCAMLPP_FLAGS) $(MODULE_OCAMLPP_FLAGS)
endif

ifndef LOCAL_OCAMLDEP_FLAGS
LOCAL_OCAMLDEP_FLAGS:=$(GLOBAL_OCAMLDEP_FLAGS) $(MODULE_OCAMLDEP_FLAGS)
endif

ifndef LOCAL_OCAMLC_FLAGS
LOCAL_OCAMLC_FLAGS:=$(GLOBAL_OCAMLC_FLAGS) $(MODULE_OCAMLC_FLAGS)
endif

ifndef LOCAL_LINK_FLAGS
LOCAL_LINK_FLAGS:=$(GLOBAL_LINK_FLAGS) $(MODULE_LINK_FLAGS)
endif

ifndef LOCAL_OCAMLCPP_FLAGS
LOCAL_OCAMLCPP_FLAGS:=$(GLOBAL_OCAMLCPP_FLAGS) $(MODULE_OCAMLCPP_FLAGS)
endif

# lm-module-ocamlpp-options: Module wide ocamlpp flags. 
lm-module-ocamlpp-options=$(LOCAL_OCAMLPP_FLAGS)

# lm-module-ocamldep-options: Module wide ocamldep flags. 
lm-module-ocamldep-options=$(lm-module-ocamlpp-options) $(LOCAL_OCAMLDEP_FLAGS)

# lm-module-ocamlc-options: Module wide ocamlc flags. 
lm-module-ocamlc-options=$(lm-module-ocamlpp-options) $(LOCAL_OCAMLC_FLAGS)

# lm-module-ocamlc-options: Module wide link flags. 
lm-module-link-options=$(LOCAL_LINK_FLAGS)

# lm-module-ocamlcpp-options: Module wide macro-expander flags. 
lm-module-ocamlcpp-options=$(LOCAL_OCAMLCPP_FLAGS)

##
# Options to pass to sub-directorys
lm-module-subdir-args=\
	GLOBAL_OCAMLPP_FLAGS='$(strip $(LOCAL_OCAMLPP_FLAGS))' \
	GLOBAL_OCAMLDEP_FLAGS='$(strip $(LOCAL_OCAMLDEP_FLAGS))' \
	GLOBAL_OCAMLC_FLAGS='$(strip $(LOCAL_OCAMLC_FLAGS))' \
	GLOBAL_LINK_FLAGS='$(strip $(LOCAL_LINK_FLAGS))' \
	GLOBAL_OCAMLCPP_FLAGS='$(strip $(LOCAL_OCAMLCPP_FLAGS))' \
	$(SUBDIR_MAKE_OPTIONS)

# lm-module-uses-objdir: Defined iff the module uses a staging directory.
# lm-module-obj-dir: The staging directory to use.
ifneq ($(strip $(MODULE_USE_OBJDIR)),no)
lm-module-uses-objdir=yes
lm-module-obj-dir=$(OBJ_ROOT)
endif

# lm-module-has-subdirs: Defined iff the module has sub-directories.
ifneq ($(strip $(SUBDIRS)),)
lm-module-has-subdirs=yes
endif

# lm-module-sources: All library and program sources, with library sources first
lm-module-sources=$(foreach lib,$(LIBRARIES),$($(lib)_SOURCES)) \
	$(foreach prog,$(PROGRAMS),$($(prog)_SOURCES))

# lm-module-mlsources: All ml sources, with library sources first
lm-module-mlsources=$(foreach src,$(lm-module-sources),$(call mlfile,$(src)))

# lm-module-headers: All headers, with library headers first
lm-module-headers= $(foreach src,$(lm-module-sources),$(call header,$(src)))

# lm-module-interfaces: All headers, with library headers first
lm-module-interfaces=$(foreach source,$(lm-module-sources),$(call interface,$(source)))

ifdef DEBUG_MAKE
$(info lm-module-lib-sources = $(lm-module-lib-sources))
$(info lm-module-prog-sources = $(lm-module-prog-sources))
$(info lm-module-interfaces = $(lm-module-interfaces))
$(info lm-module-headers = $(lm-module-headers))
$(info lm-module-mlsources = $(lm-module-mlsources))
$(info lm-module-subdir-args = $(lm-module-subdir-args))
endif #DEBUG_MAKE

###
# Instantiate the targets
#

##
# Instantiate obj-dir install targets
$(eval $(call install-module-template,objdir,$(OBJ_ROOT)))

##
# Instantiate targets for each sub-directory
$(foreach sub,$(SUBDIRS),\
$(eval $(call subdir-targets-template,$(sub))))

##
# Instantiate bytelib build targets for each target.
#$(foreach lib,$(LIBRARIES),\
#$(eval $(call build-bytelib-template,$(lib))))

$(foreach lib,$(LIBRARIES),\
$(eval $(call library-targets-template,$(lib))))

##
# Instantiate build targets for byte-code programs
$(foreach prog,$(PROGRAMS),\
$(eval $(call build-byteprog-template,$(prog))))

##
# Instantiate packings build targets for each target.
#$(foreach lib,$(PACKING),\
#$(eval $(call build-packing-template,$(lib))))

$(foreach lib,$(PACKING),\
$(eval $(call packing-targets-template,$(lib))))
##

# Instantiate packed build targets for each target.
$(foreach lib,$(PACKED),\
$(eval $(call build-packed-template,$(lib))))


###
# Directories
#
ifeq ($(lm-module-uses-objdir),yes)
lm-module-objdir=$(OBJ_ROOT)
$(eval $(call make-dir-template,$(lm-module-objdir)))
else
lm-module-objdir=
endif

.PHONY: build-objdir
build-objdir: $(lm-module-objdir)

#
# Libraries
#

.PHONY: build-headers
build-headers: $(lm-module-interfaces)

.PHONY: build-bytelibs
$(info LIBRARIES = $(LIBRARIES))
build-bytelibs: $(foreach lib,$(LIBRARIES),build-bytelib-$(lib) )

.PHONY: build-programs
build-programs: $(foreach prog,$(PROGRAMS),build-byteprog-$(prog) )

.PHONY: build-packings
$(info PACKING = $(PACKING))
build-packings: $(foreach lib,$(PACKING),build-packing-$(lib) )

.PHONY: build-packed
$(info PACKED = $(PACKED))
build-packings: $(foreach lib,$(PACKED),build-packed-$(lib) )



###
# Clean up
###


clean: $(foreach lib,$(LIBRARIES),clean-lib-$(lib)) \
	$(foreach group,$(PACKING),clean-packing-$(group))
	$(foreach subdir, $(SUBDIRS), \
		$(MAKE) -C $(subdir) clean; )
	-$(RM) *.cmo *.cmx *.o *~
	$(EXTRA_CLEAN)

libclean: clean
	$(foreach subdir, $(SUBDIRS), \
		$(MAKE) -C $(subdir) libclean; )
	-$(RM) *.cmi *.cma *.cmxa *~
	$(EXTRA_LIBCLEAN)

distclean: clean libclean
	$(foreach subdir, $(DOCSUBDIRS), \
		$(MAKE) -C $(subdir) reallyclean; )
	-$(RM) depend
	$(EXTRA_DISTCLEAN)

###
# Toplevel targets

.PHONY: build
ifneq ($(strip CUSTOM_TARGET_build),yes)
build: build-objdir build-subdirs \
	build-bytelibs build-programs build-packings \
	module-install-objdir
endif

.PHONY: install
ifneq ($(strip CUSTOM_TARGET_install),yes)
install: build
endif

##
# Run the sub-directories.

#ifdef lm-module-has-subdirs
.PHONY: depend-subdirs
lm-subdir-depend-target=$(foreach sub,$(SUBDIRS), depend-subdir-$(sub))
depend-subdirs: $(lm-subdir-depend-target)

.PHONY: build-subdirs
lm-subdir-build-target=$(foreach sub,$(SUBDIRS), build-subdir-$(sub))
build-subdirs: $(lm-subdir-build-target)

.PHONY: install-subdirs
lm-subdir-install-target=$(foreach sub,$(SUBDIRS), install-subdir-$(sub))
install-subdirs: $(lm-subdir-install-target)

.PHONY: clean-subdirs
lm-subdir-clean-target=$(foreach sub,$(SUBDIRS), clean-subdir-$(sub))
clean-subdirs: $(lm-subdir-clean-target)

.PHONY: libclean-subdirs
lm-subdir-libclean-target=$(foreach sub,$(SUBDIRS), libclean-subdir-$(sub))
libclean-subdirs: $(lm-subdir-libclean-target)

.PHONY: distclean-subdirs
lm-subdir-distclean-target=$(foreach sub,$(SUBDIRS), distclean-subdir-$(sub))
distclean-subdirs: $(lm-subdir-distclean-target)
#endif

##
# Dependencies
# Define NODEPEND to prevent using depend
##

ifneq ($(strip $(lm-module-headers) $(lm-module-mlsources)),)
ifndef NODEPEND
#depend: $(lm-module-headers)
#	-$(OCAMLDEP) $(lm-module-headers) $(lm-module-mlsources) > depend
depend: $(lm-module-mlsources)
	-$(OCAMLDEP) *.mli  $(lm-module-mlsources) > depend
include depend
endif # NODEPEND
endif


####
# Variables that should not be exported
unexport lm-module-uses-objdir
unexport lm-module-has-subdirs
