# -*- Makefile -*--##################################################
# Makefile.module - Makefile to build documents
# Copyright 2014-2016, Matthew Wahab <mwb.cde@gmail.com>
#
# Released under the Lesser GPLv3 license:
# ========================================
# This file is part of HSeq.
#
# HSeq is free software; you can redistribute it and/or modify it under the
# terms of the Lesser GNU General Public License as published by the Free
# Software Foundation; either version 3, or (at your option) any later version.
#
# HSeq is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the Lesser GNU General Public License for more
# details.
#
# You should have received a copy of the Lesser GNU General Public License along
# with HSeq.  If not see <http://www.gnu.org/licenses/>.
######################################################################

######################################################################
# Toplevel build targets
#

.PHONY: all build clean install
all: build
build: build-doc-subdir build-doc

ifeq '$(strip $(ENABLE_BUILD_DOCS))' 'false'
install:
else
install: install-doc-subdir install-doc
endif

clean: clean-doc-subdir clean-doc

###
# Include common definitions

# Test for PROJ_ROOT being defined.
ifndef PROJ_ROOT
$(error "PROJ_ROOT Must be set to relative path to HSeq root")
endif
include $(PROJ_ROOT)/Makefile.rules

########
# Tools

# MAKEINFO: The makeinfo program
ifndef MAKEINFO
MAKEINFO=makeinfo ${OPTIONS}
endif

#####################
# Documentation
#
# template doc_TEMPLATE
# Build rules for document $(1).
# Inputs:
#   - $(1)_TEXINFO: Texinfo source files
#   - $(1)_INCLUDE: Include directory
#   - $(1)_OUTPUT: Name of the document [default: $(1)]
#   - $(1)_HTMLDIR: Name of the document html directory
#		    [default: $($(1)_output).html]
#   - $(1)_INFODIR: Name of the document info directory
#		    [default: $($(1)_output).info]
define doc_TEMPLATE

##
# Set variables

# The output name
lm-doc-$(1)-output:=\
	$$(or $$(strip $$($(1)_OUTPUT)),$$(strip $(1)))

# The html directory
lm-doc-$(1)-htmldir:=\
	$$(or $$(strip $$($(1)_HTMLDIR)),$$(lm-doc-$(1)-output).html)

# The info directory
lm-doc-$(1)-infodir:=\
	$$(or $$(strip $$($(1)_INFODIR)),$$(lm-doc-$(1)-output).info)

# Directories to include
lm-doc-$(1)-includedir:=\
	$$(foreach dir,$$($(1)_INCLUDE) $$(MODULE_INCLUDE),-I $$(dir))

# Document sources.
lm-doc-$(1)-sources:= $$($(1)_TEXINFO)

# The installation directory.
lm-doc-$(1)-installdir:=$$(lm-installdir-doc)

##
# Build rules

# The html directory
$$(lm-doc-$(1)-htmldir):
	$$(MKDIR) $$(lm-doc-$(1)-htmldir)

$$(lm-doc-$(1)-htmldir)/README.txt: \
		$$(lm-doc-lm-doc-$(1)-htmldir) $$(lm-doc-$(1)-sources)
	$$(MAKEINFO) --html $$(lm-doc-$(1)-includedir) \
		$$(lm-doc-$(1)-sources) \
		-o $$(lm-doc-$(1)-htmldir)
	echo "HTML documentation." > $$(lm-doc-$(1)-htmldir)/README.txt

.PHONY: build-doc-$(1)-html
build-doc-$(1)-html: $$(lm-doc-$(1)-htmldir)/README.txt

# The info directory
$$(lm-doc-$(1)-infodir):
	$$(MKDIR) $$(lm-doc-$(1)-infodir)

$$(lm-doc-$(1)-infodir)/README.txt: \
	$$(lm-doc-$(1)-infodir) $$(lm-doc-$(1)-sources)
	$$(MAKEINFO) --info $$(lm-doc-$(1)-includedir) \
		$$(lm-doc-$(1)-sources) \
		-o $$(lm-doc-$(1)-infodir)
	echo "INFO documentation." > $$(lm-doc-$(1)-infodir)/README.txt

.PHONY: build-doc-$(1)-info
build-doc-$(1)-info: $$(lm-doc-$(1)-infodir)/README.txt

# Install rules.
lm-doc-$(1)-info-installed-files:=\
	$$(lm-doc-$(1)-installdir)/$$(lm-doc-$(1)-infodir)

lm-doc-$(1)-html-installed-files:=\
	$$(lm-doc-$(1)-installdir)/$$(lm-doc-$(1)-infodir)

.PHONY: install-doc-$(1)-info
install-doc-$(1)-info: build-doc-$(1)-info $$(lm-doc-$(1)-installdir)
	$$(COPY) -r $$(lm-doc-$(1)-infodir) $$(lm-doc-$(1)-installdir)
	$$(CHMOD) -R $$(lm-file-permissions) \
			$$(lm-doc-$(1)-info-installed-files)

.PHONY: install-doc-$(1)-html
install-doc-$(1)-html: build-doc-$(1)-html $$(lm-doc-$(1)-installdir)
	$$(COPY) -r $$(lm-doc-$(1)-htmldir) $$(lm-doc-$(1)-installdir)
	$$(CHMOD) -R $$(lm-file-permissions) \
			$$(lm-doc-$(1)-html-installed-files)

# Clean
.PHONY: clean-doc-$(1)-html
clean-doc-$(1)-html:
	$$(RM) -r $$(lm-doc-$(1)-htmldir)

.PHONY: clean-doc-$(1)-info
clean-doc-$(1)-info:
	$$(RM) -r $$(lm-doc-$(1)-infodir)

####
# Toplevel rules

# Build
.PHONY: build-doc-$(1)
build-doc-$(1): build-doc-$(1)-info build-doc-$(1)-html

# install
.PHONY: install-doc-$(1)
install-doc-$(1): install-doc-$(1)-info install-doc-$(1)-html

# Clean
.PHONY: clean-doc-$(1)
clean-doc-$(1): clean-doc-$(1)-info clean-doc-$(1)-html

endef # doc_TEMPLATE

####################
# Expand documents template

$(foreach doc,$(DOCUMENTS), \
$(eval $(call doc_TEMPLATE,$(doc))))

####################
# Documentation build targets

# Build
.PHONY: build-doc build-info build-html

ifeq '$(strip $(ENABLE_BUILD_DOCS))' 'false'
build-doc:
build-info:
build-html:
else
build-doc: $(foreach doc,$(DOCUMENTS), build-doc-$(doc))
	@echo "Built docs."
build-info: $(foreach doc,$(DOCUMENTS), build-doc-$(doc)-info)
	@echo "Built info docs."
build-html: $(foreach doc,$(DOCUMENTS), build-doc-$(doc)-html)
	@echo "Built html docs."
endif

# install
.PHONY: install-doc install-info install-html
ifeq '$(strip $(ENABLE_BUILD_DOC))' 'false'
install-doc:
install-info:
install-html:
else
install-doc: $(foreach doc,$(DOCUMENTS), install-doc-$(doc))
	@echo "Installed docs."
install-info: $(foreach doc,$(DOCUMENTS), install-doc-$(doc)-info)
	@echo "Installed info docs."
install-html: $(foreach doc,$(DOCUMENTS), install-doc-$(doc)-html)
	@echo "Installed html docs."
endif

# Clean
.PHONY: clean-doc clean-info clean-html
clean-doc: $(foreach doc,$(DOCUMENTS), clean-doc-$(doc))
clean-info: $(foreach doc,$(DOCUMENTS), clean-$(doc)-info)
clean-html: $(foreach doc,$(DOCUMENTS), clean-$(doc)-html)


#####################
# Documentation Subdirectories
#
# template doc-subdir_TEMPLATE
# Build rules for subdir lm-doc-$(1).
define doc-subdir_TEMPLATE

####
# Toplevel rules

# Build
.PHONY: build-doc-subdir-$(1)
build-doc-subdir-$(1):
	$(MAKE) -C $(1) build

# Install
.PHONY:  install-doc-subdir-$(1)
install-doc-subdir-$(1):
	$(MAKE) -C $(1) install

# Clean
.PHONY: clean-doc-subdir-$(1)
clean-doc-subdir-$(1):
	$(MAKE) -C $(1) clean

endef # doc-subdir_TEMPLATE

####################
# Expand document subdirs template

$(foreach subdir,$(DOCSUBDIRS), \
$(eval $(call doc-subdir_TEMPLATE,$(subdir))))

####################
# Documentation subdir targets

# Build
.PHONY: build-doc-subdir
ifeq '$(strip $(ENABLE_BUILD_DOCS))' 'false'
build-doc-subdir:
else
build-doc-subdir: \
	$(foreach subdir,$(DOCSUBDIRS), build-doc-subdir-$(subdir))
endif

# Install
.PHONY: install-doc-subdir
ifeq '$(strip $(ENABLE_BUILD_DOCS))' 'false'
install-doc-subdir:
else
install-doc-subdir: \
	$(foreach subdir,$(DOCSUBDIRS), install-doc-subdir-$(subdir))

endif

# Clean
.PHONY: clean-doc-subdir
clean-doc-subdir: $(foreach subdir,$(DOCSUBDIRS), clean-doc-subdir-$(subdir))
