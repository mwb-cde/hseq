###################################################### --*- Makefile -*--
# Makefile.common - Common make rules for HSeq
# Copyright 11 March, 2011, Matthew Wahab <mwb.cde@gmail.com>
#
# Released under the Lesser GPLv3 license:
# ========================================
# This file is part of HSeq.
#
# HSeq is free software; you can redistribute it and/or modify it
# under the terms of the Lesser GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# HSeq is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the Lesser GNU General Public
# License for more details.
#
# You should have received a copy of the Lesser GNU General Public
# License along with HSeq.  If not see <http://www.gnu.org/licenses/>.
######################################################################

#####
# Common definitions and rules for Makefiles
#
# Requirements:
# -------------
# PROJ_ROOT: Variable containing relative path to top of the source tree.
#####

##
# Build commands
##

# BAREMAKE: The make with no options
export BAREMAKE = $(MAKE)

# DMAKE: The make to build sub-directories with.
#export DMAKE = make $(MAKEOPTIONS)
export DMAKE = $(MAKE)

# MAKECLEAN: The make to clean up with
export MAKECLEAN = $(MAKE) NODEPEND=true $(MAKEOPTIONS)

##
# OS Commands
##

# CD: Change directory
export CD = cd

# MKDIR: Make a directory
export MKDIR = mkdir -p

# RMDIR: Remove a directory
export RMDIR = rmdir

# COPY: Copy one or more files
export COPY = cp -f

# RM: Delete one or more files
export RM = rm -f

# SKIP: Do nothing
export SKIP =

##
# Build Targets
##

## General targets

.PHONY: all  	# all: Build everything
.PHONY: lib  	# lib: Build the library file
.PHONY: opt  	# opt: Build the native code library file
.PHONY: install # install: Install the library and header files.
.PHONY: doc  	# doc: Generate the code documentation

## Cleaning targets
.PHONY: clean
.PHONY: libclean
.PHONY: docclean
.PHONY: distclean

## build targets

.PHONY: build-headers 
.PHONY: build-code build-bytecode build-natcode
.PHONY: build-bytelib build-natlib build-lib

.PHONY: install-headers 
.PHONY: install-code install-bytecode install-natcode
.PHONY: install-bytelib install-natlib install-lib
.PHONY: install-other

#####
# Constants
#####

# PROJ_ROOT: Relative path to the top of the source tree is required.
ifndef PROJ_ROOT
$(error "Error: variable PROJ_ROOT not set when using Makefile in directory $(CURDIR)")
endif

# CONFIGDIR: The configuration directory
CONFIGDIR=config

# CONFIGFILE: Configuration data file 
CONFIGFILE = $(PROJ_ROOT)/$(CONFIGDIR)/data.make

###
# Configuration variables
# Set by data.make
###

ifndef CONFIGFILE
$(error "CONFIGFILE not defined")
endif

# Read $(CONFIGFILE)
include $(CONFIGFILE)

ifndef SrcDir
$(error Error in $(CONFIGFILE): SrcDir not defined)
endif

ifndef BinDir
$(error Error in $(CONFIGFILE): BinDir not defined)
endif

####
# Feature tests
#

# Whether camlp4 is old.
ifndef OLDCAMLP4
# Get the version of camlp4
export CAMLP4VERSION=OcamlVersion
ifeq ($(findstring CAMLP4VERSION,3.11),'')
$(info "Using OCaml 3.11.?")
export OLDCAMLP4=true
else
$(info "Using OCaml 3.12+")
export OLDCAMLP4=false
endif
endif # OLDCAMLP4

####
# Variable definitions
#

# SRC_ROOT: Absolute path to the root of the source tree. Defined in
# config/data.make by configure.ml.
export SRC_ROOT:=$(SrcDir)

# OBJ_ROOT: Staging directory for built objects.
OBJ_DIR?=obj
ifndef OBJ_ROOT
OBJ_ROOT:=$(SRC_ROOT)/$(OBJ_DIR)
endif
OBJ_ROOT:=$(OBJ_ROOT)/$(MODULE_OBJ_PATH)
export OBJ_ROOT


####
# HSeq building variables

# The quotation parser to use when building libraries and programs.
export TPQUOTELIB='$(OBJ_ROOT)/lib/tpquote.cma'

###
# Global tool options

# GLOBAL_OCAMLC_FLAGS: Flags to pass to the compiler for [object].
GLOBAL_OCAMLC_FLAGS?=-I $(SRC_ROOT)/$(OBJ_DIR)/lib

# GLOBAL_OCAMLPP_FLAGS: Flags to pass to the pre-processor (which is
# used as a front-end to the compiler).
#GLOBAL_OCAMLPP_FLAGS?=

# GLOBAL_LINK_FLAGS: Flags to pass to the linker.
GLOBAL_LINK_FLAGS?=-custom -I $(SRC_ROOT)/$(OBJ_DIR)/lib

# GLOBAL_OCAMLNAT_FLAGS: Flags to pass to the native-code compiler for [object].
GLOBAL_OCAMLNAT_FLAGS?=-I $(SRC_ROOT)/$(OBJ_DIR)/lib

# GLOBAL_NATLINK_FLAGS: Flags to pass to the native-code linker.
GLOBAL_NATLINK_FLAGS?=-I $(SRC_ROOT)/$(OBJ_DIR)/lib

# GLOBAL_OCAMLCPP_FLAGS: Flags to pass to the macro-expander (which
# converts from .mlp to .ml files).
GLOBAL_OCAMLCPP_FLAGS?=-I $(SRC_ROOT)/$(CONFIGDIR)


